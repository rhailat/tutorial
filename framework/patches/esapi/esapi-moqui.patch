Index: .classpath
===================================================================
--- .classpath	(revision 1961)
+++ .classpath	(working copy)
@@ -1,10 +1,39 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="src" output="target/classes" path="src/main/java"/>
-	<classpathentry kind="src" output="target/test-classes" path="src/test/java"/>
-	<classpathentry excluding="**" kind="src" output="target/test-classes" path="src/test/resources"/>
-	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
-	<classpathentry kind="con" path="org.maven.ide.eclipse.MAVEN2_CLASSPATH_CONTAINER"/>
-	<classpathentry kind="con" path="org.eclipse.jst.server.core.container/org.eclipse.jst.server.tomcat.runtimeTarget/Apache Tomcat v6.0"/>
-	<classpathentry kind="output" path="target/classes"/>
-</classpath>
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="src" output="target/classes" path="src/main/java">
+		<attributes>
+			<attribute name="optional" value="true"/>
+			<attribute name="maven.pomderived" value="true"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry kind="src" output="target/test-classes" path="src/test/java">
+		<attributes>
+			<attribute name="optional" value="true"/>
+			<attribute name="maven.pomderived" value="true"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry excluding="**" kind="src" output="target/test-classes" path="src/test/resources">
+		<attributes>
+			<attribute name="maven.pomderived" value="true"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry kind="con" path="org.maven.ide.eclipse.MAVEN2_CLASSPATH_CONTAINER"/>
+	<classpathentry kind="con" path="org.eclipse.jst.server.core.container/org.eclipse.jst.server.tomcat.runtimeTarget/Apache Tomcat v6.0"/>
+	<classpathentry kind="con" path="org.eclipse.m2e.MAVEN2_CLASSPATH_CONTAINER">
+		<attributes>
+			<attribute name="maven.pomderived" value="true"/>
+			<attribute name="org.eclipse.jst.component.nondependency" value=""/>
+		</attributes>
+	</classpathentry>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7">
+		<attributes>
+			<attribute name="maven.pomderived" value="true"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry kind="src" path=".apt_generated">
+		<attributes>
+			<attribute name="optional" value="true"/>
+		</attributes>
+	</classpathentry>
+	<classpathentry kind="output" path="target/classes"/>
+</classpath>
Index: .project
===================================================================
--- .project	(revision 1961)
+++ .project	(working copy)
@@ -31,8 +31,14 @@
 			<arguments>
 			</arguments>
 		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.m2e.core.maven2Builder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
 	</buildSpec>
 	<natures>
+		<nature>org.eclipse.m2e.core.maven2Nature</nature>
 		<nature>org.maven.ide.eclipse.maven2Nature</nature>
 		<nature>org.eclipse.jem.workbench.JavaEMFNature</nature>
 		<nature>org.eclipse.wst.common.modulecore.ModuleCoreNature</nature>
Index: .settings/org.eclipse.core.resources.prefs
===================================================================
--- .settings/org.eclipse.core.resources.prefs	(revision 1961)
+++ .settings/org.eclipse.core.resources.prefs	(working copy)
@@ -1,3 +1,5 @@
-#Thu Nov 26 01:50:11 HST 2009
 eclipse.preferences.version=1
+encoding//src/main/java=UTF-8
+encoding//src/test/java=UTF-8
+encoding//src/test/resources=UTF-8
 encoding/<project>=UTF-8
Index: .settings/org.eclipse.jdt.core.prefs
===================================================================
--- .settings/org.eclipse.jdt.core.prefs	(revision 1961)
+++ .settings/org.eclipse.jdt.core.prefs	(working copy)
@@ -1,6 +1,9 @@
-#Tue May 10 22:28:38 MDT 2011
 eclipse.preferences.version=1
-org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.5
-org.eclipse.jdt.core.compiler.compliance=1.5
+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.7
+org.eclipse.jdt.core.compiler.compliance=1.7
+org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
+org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
 org.eclipse.jdt.core.compiler.problem.forbiddenReference=warning
-org.eclipse.jdt.core.compiler.source=1.5
+org.eclipse.jdt.core.compiler.processAnnotations=enabled
+org.eclipse.jdt.core.compiler.source=1.7
Index: .settings/org.eclipse.wst.common.component
===================================================================
--- .settings/org.eclipse.wst.common.component	(revision 1961)
+++ .settings/org.eclipse.wst.common.component	(working copy)
@@ -1,10 +1,8 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project-modules id="moduleCoreId" project-version="1.5.0">
-  <wb-module deploy-name="ESAPI">
-    <wb-resource deploy-path="/" source-path="src/main/java"/>
-    <wb-resource deploy-path="/" source-path="src/main/resources"/>
-        <wb-resource deploy-path="/" source-path="/src/test/java"/>
-        <wb-resource deploy-path="/" source-path="/src/test/resources"/>
-        <wb-resource deploy-path="/" source-path="/src/main/java"/>
-  </wb-module>
-</project-modules>
+<?xml version="1.0" encoding="UTF-8"?><project-modules id="moduleCoreId" project-version="1.5.0">
+  <wb-module deploy-name="ESAPI">
+    <wb-resource deploy-path="/" source-path="src/main/java"/>
+    <wb-resource deploy-path="/" source-path="src/main/resources"/>
+        <wb-resource deploy-path="/" source-path="/src/main/java"/>
+        <wb-resource deploy-path="/" source-path="/.apt_generated"/>
+  </wb-module>
+</project-modules>
Index: .settings/org.eclipse.wst.common.project.facet.core.xml
===================================================================
--- .settings/org.eclipse.wst.common.project.facet.core.xml	(revision 1961)
+++ .settings/org.eclipse.wst.common.project.facet.core.xml	(working copy)
@@ -1,6 +1,7 @@
-<faceted-project>
-  <fixed facet="jst.java"/>
-  <fixed facet="jst.utility"/>
-  <installed facet="jst.utility" version="1.0"/>
-  <installed facet="jst.java" version="5.0"/>
-</faceted-project>
\ No newline at end of file
+<?xml version="1.0" encoding="UTF-8"?>
+<faceted-project>
+  <fixed facet="jst.java"/>
+  <fixed facet="jst.utility"/>
+  <installed facet="jst.utility" version="1.0"/>
+  <installed facet="jst.java" version="1.7"/>
+</faceted-project>
Index: configuration/esapi/ESAPI.properties
===================================================================
--- configuration/esapi/ESAPI.properties	(revision 1961)
+++ configuration/esapi/ESAPI.properties	(working copy)
@@ -74,9 +74,7 @@
 ESAPI.Executor=org.owasp.esapi.reference.DefaultExecutor
 ESAPI.HTTPUtilities=org.owasp.esapi.reference.DefaultHTTPUtilities
 ESAPI.IntrusionDetector=org.owasp.esapi.reference.DefaultIntrusionDetector
-# Log4JFactory Requires log4j.xml or log4j.properties in classpath - http://www.laliluna.de/log4j-tutorial.html
-ESAPI.Logger=org.owasp.esapi.reference.Log4JLogFactory
-#ESAPI.Logger=org.owasp.esapi.reference.JavaLogFactory
+ESAPI.Logger=org.slf4j.LoggerFactory
 ESAPI.Randomizer=org.owasp.esapi.reference.DefaultRandomizer
 ESAPI.Validator=org.owasp.esapi.reference.DefaultValidator
 
Index: pom.xml
===================================================================
--- pom.xml	(revision 1961)
+++ pom.xml	(working copy)
@@ -3,7 +3,7 @@
     <modelVersion>4.0.0</modelVersion>
     <groupId>org.owasp.esapi</groupId>
     <artifactId>esapi</artifactId>
-    <version>2.1.1-SNAPSHOT</version>
+    <version>2.1.0</version>
     <packaging>jar</packaging>
 
     <parent>
@@ -11,6 +11,11 @@
         <artifactId>oss-parent</artifactId>
         <version>5</version>
     </parent>
+    
+    <prerequisites>
+       <maven>3.0</maven>
+    </prerequisites>
+    
 
     <licenses>
         <license>
@@ -161,14 +166,15 @@
             <version>3.2.1</version>
             <scope>compile</scope>
         </dependency>
+		
+		<dependency>
+			<groupId>org.slf4j</groupId>
+			<artifactId>slf4j-api</artifactId>
+			<version>1.7.12</version>
+			<scope>compile</scope>
+		</dependency>
+
         <dependency>
-            <groupId>log4j</groupId>
-            <artifactId>log4j</artifactId>
-            <version>1.2.16</version>
-            <scope>compile</scope>
-            <type>jar</type>
-        </dependency>
-        <dependency>
             <groupId>xom</groupId>
             <artifactId>xom</artifactId>
             <version>1.2.5</version>
@@ -183,6 +189,13 @@
             <artifactId>antisamy</artifactId>
             <version>1.5.3</version>
         </dependency>
+        
+		<dependency>
+			<groupId>org.bouncycastle</groupId>
+			<artifactId>bcprov-jdk16</artifactId>
+			<version>1.46</version>
+		</dependency>
+
     </dependencies>
 
     <build>
@@ -189,11 +202,11 @@
         <plugins>
             <plugin>
                 <artifactId>maven-compiler-plugin</artifactId>
-                <version>3.1</version>
+                <version>3.2</version>
                 <configuration>
-                    <source>1.6</source>
-                    <target>1.6</target>
-                    <debug>true</debug>
+                    <source>1.7</source>
+                    <target>1.7</target>
+                    <debug>false</debug>
                     <showWarnings>true</showWarnings>
                     <showDeprecation>false</showDeprecation>
                 </configuration>
@@ -207,11 +220,12 @@
                     <downloadSources>true</downloadSources>
                 </configuration>
             </plugin>
-
-            <plugin>
-                <artifactId>maven-jar-plugin</artifactId>
-                <version>2.4</version>
-                <configuration>
+			<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-jar-plugin</artifactId>
+				<version>2.6</version>
+     			<configuration>
+                 	<classifier>moqui</classifier>
                     <archive>
                         <manifest>
                             <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
@@ -219,8 +233,22 @@
                         </manifest>
                     </archive>
                 </configuration>
-            </plugin>
-
+			</plugin>
+      		<plugin>
+      			<groupId>org.apache.maven.plugins</groupId>
+		        <artifactId>maven-assembly-plugin</artifactId>
+		        <version>2.5.5</version>
+		    </plugin>
+ 			<plugin>
+        		<artifactId>maven-surefire-plugin</artifactId>
+        		<version>2.19</version>
+        		<configuration>
+        			<systemPropertyVariables>
+    					<org.owasp.esapi.resources>${project.build.directory}/test-classes/esapi</org.owasp.esapi.resources>
+    				</systemPropertyVariables>
+    				<!-- https://code.google.com/p/owasp-esapi-java/wiki/esapi4java_v2_Using_ESAPI_for_Java_with_Eclipse -->
+        		</configuration>
+        	</plugin>
             <!-- Check for updates to dependencies and report on them. -->
             <plugin>
                 <groupId>org.codehaus.mojo</groupId>
@@ -238,7 +266,6 @@
                     </execution>
                 </executions>
             </plugin>
-
         </plugins>
     </build>
 
Index: src/examples/java/ESAPILogging.java
===================================================================
--- src/examples/java/ESAPILogging.java	(revision 1961)
+++ src/examples/java/ESAPILogging.java	(working copy)
@@ -1,5 +1,5 @@
 import org.owasp.esapi.ESAPI;
-import org.owasp.esapi.Logger;
+import org.slf4j.Logger;
 
 // Purpose: Short code snippet to show how ESAPI logging works.
 //
@@ -12,7 +12,7 @@
         try {
             Logger logger = ESAPI.getLogger("ESAPILogging");
             
-            logger.warning(Logger.SECURITY_FAILURE, "This is a warning.");
+            logger.warn(ESAPI.getSecurityFailureMarker(), "This is a warning.");
             logger.always(Logger.SECURITY_AUDIT, "This is an audit log. It always logs.");
         } catch(Throwable t) {
             System.err.println("Caught: " + t.getClass().getName() +
Index: src/examples/scripts/setenv-svn.sh
===================================================================
--- src/examples/scripts/setenv-svn.sh	(revision 1961)
+++ src/examples/scripts/setenv-svn.sh	(working copy)
@@ -25,7 +25,7 @@
 esapi_resources="$(\cd ../../../configuration/esapi >&- 2>&- && pwd)"
 esapi_resources_test="$(\cd ../../../src/test/resources/esapi >&- 2>&- && pwd)"
 
-log4j_properties="../../../src/test/resources/log4j.xml"
+log4j_properties="../../../src/test/resources/log4j2.xml"
 
 if [[ ! -r "$esapi_resources"/ESAPI.properties ]]
 then echo 2>&1 "setenv-svn.sh: Can't read ESAPI.properties in $esapi_resources"
@@ -38,7 +38,7 @@
 fi
 
 if [[ ! -r "$log4j_properties" ]]
-then echo 2>&1 "setenv-svn.sh: Can't read log4j.xml: $log4j_properties"
+then echo 2>&1 "setenv-svn.sh: Can't read log4j2.xml: $log4j_properties"
      return 1   # Don't use 'exit' here or it will kill their current shell.
 fi
 
Index: src/examples/scripts/setenv-zip.sh
===================================================================
--- src/examples/scripts/setenv-zip.sh	(revision 1961)
+++ src/examples/scripts/setenv-zip.sh	(working copy)
@@ -23,7 +23,7 @@
 esapi_resources="$(\cd ../../../configuration/esapi >&- 2>&- && pwd)"
 esapi_resources_test="$(\cd ../../../src/test/resources/esapi >&- 2>&- && pwd)"
 
-log4j_properties="../../../src/test/resources/log4j.xml"
+log4j_properties="../../../src/test/resources/log4j2.xml"
 
 if [[ ! -r "$esapi_resources"/ESAPI.properties ]]
 then echo 2>&1 "setenv-svn.sh: Can't read ESAPI.properties in $esapi_resources"
@@ -36,7 +36,7 @@
 fi
 
 if [[ ! -r "$log4j_properties" ]]
-then echo 2>&1 "setenv-svn.sh: Can't read log4j.xml: $log4j_properties"
+then echo 2>&1 "setenv-svn.sh: Can't read log4j2.xml: $log4j_properties"
      return 1   # Don't use 'exit' here or it will kill their current shell.
 fi
 
Index: src/main/assembly/dist.xml
===================================================================
--- src/main/assembly/dist.xml	(revision 1961)
+++ src/main/assembly/dist.xml	(working copy)
@@ -38,8 +38,7 @@
             <outputDirectory>configuration</outputDirectory>
             <includes>
                 <include>.esapi/**/*</include>
-                <include>log4j.dtd</include>
-                <include>log4j.xml</include>
+                <include>log4j2.xml</include>
                 <include>properties/**/*</include>
             </includes>
         </fileSet>
Index: src/main/java/org/owasp/esapi/ESAPI.java
===================================================================
--- src/main/java/org/owasp/esapi/ESAPI.java	(revision 1961)
+++ src/main/java/org/owasp/esapi/ESAPI.java	(working copy)
@@ -20,6 +20,10 @@
 import javax.servlet.http.HttpServletResponse;
 
 import org.owasp.esapi.util.ObjFactory;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.slf4j.Marker;
+import org.slf4j.MarkerFactory;
 
 /**
  * ESAPI locator class is provided to make it easy to gain access to the current ESAPI classes in use.
@@ -27,7 +31,11 @@
  */
 public final class ESAPI {
 	private static String securityConfigurationImplName = System.getProperty("org.owasp.esapi.SecurityConfiguration", "org.owasp.esapi.reference.DefaultSecurityConfiguration");
-
+	private final static Marker securityFailureMarker = MarkerFactory.getDetachedMarker("SECURITY_FAILURE");
+	private final static Marker securitySuccessMarker = MarkerFactory.getDetachedMarker("SECURITY_SUCCESS");
+	private final static Marker eventFailureMarker = MarkerFactory.getDetachedMarker("EVENT_FAILURE");
+	private final static Marker eventUnspecifiedMarker = MarkerFactory.getDetachedMarker("EVENT_UNSPECIFIED");
+	private final static Marker eventSuccessMarker = MarkerFactory.getDetachedMarker("EVENT_SUCCESS");
 	/**
 	 * prevent instantiation of this class
 	 */
@@ -47,7 +55,7 @@
 				ESAPI.authenticator().login();
 				chain.doFilter(request, response);
 			} catch (Exception e) {
-				logger.error( Logger.SECURITY_FAILURE, "Error in ESAPI security filter: " + e.getMessage(), e );
+				logger.error( ESAPI.getSecurityFailureMarker(), "Error in ESAPI security filter: " + e.getMessage(), e );
 			} finally {
 				// VERY IMPORTANT
 				// clear out ThreadLocal variables
@@ -128,14 +136,6 @@
         return ObjFactory.make( securityConfiguration().getIntrusionDetectionImplementation(), "IntrusionDetector" );
 	}
 
-	/**
-	 * Get the current LogFactory being used by ESAPI. If there isn't one yet, it will create one, and then 
-	 * return this same LogFactory from then on.
-	 * @return The current LogFactory being used by ESAPI.
-	 */
-	private static LogFactory logFactory() {
-        return ObjFactory.make( securityConfiguration().getLogImplementation(), "LogFactory" );
-	}
 	
 	/**
 	 * @param clazz The class to associate the logger with.
@@ -143,7 +143,7 @@
 	 */
 	@SuppressWarnings("unchecked")		// Because Eclipse wants Class<T> instead.
 	public static Logger getLogger(Class clazz) {
-		return logFactory().getLogger(clazz);
+		return LoggerFactory.getLogger(clazz);
 	}
 	
 	/**
@@ -151,7 +151,7 @@
 	 * @return The current Logger associated with the specified module.
 	 */
 	public static Logger getLogger(String moduleName) {
-		return logFactory().getLogger(moduleName);
+		return LoggerFactory.getLogger(moduleName);
 	}
 	
 	/**
@@ -158,7 +158,7 @@
 	 * @return The default Logger.
 	 */
 	public static Logger log() {
-        return logFactory().getLogger("DefaultLogger");
+        return LoggerFactory.getLogger("DefaultLogger");
     }
 	
 	/**
@@ -221,4 +221,25 @@
     public static void override( SecurityConfiguration config ) {
         overrideConfig = config;
     }
+    
+    public static Marker getSecurityFailureMarker(){
+    	return securityFailureMarker;
+    }
+    
+    public static Marker getSecuritySuccessMarker(){
+    	return securitySuccessMarker;
+    }
+    
+    public static Marker getEventFailureMarker(){
+    	return eventFailureMarker;
+    }
+
+	public static Marker getEventunspecifiedMarker() {
+		return eventUnspecifiedMarker;
+	}
+
+	public static Marker getEventsuccessMarker() {
+		return eventSuccessMarker;
+	}
 }
+
Index: src/main/java/org/owasp/esapi/HTTPUtilities.java
===================================================================
--- src/main/java/org/owasp/esapi/HTTPUtilities.java	(revision 1961)
+++ src/main/java/org/owasp/esapi/HTTPUtilities.java	(working copy)
@@ -16,6 +16,7 @@
 package org.owasp.esapi;
 
 import org.owasp.esapi.errors.*;
+import org.slf4j.Logger;
 
 import javax.servlet.ServletException;
 import javax.servlet.http.Cookie;
@@ -22,6 +23,7 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import javax.servlet.http.HttpSession;
+
 import java.io.File;
 import java.io.IOException;
 import java.util.List;
Index: src/main/java/org/owasp/esapi/LogFactory.java
===================================================================
--- src/main/java/org/owasp/esapi/LogFactory.java	(revision 1961)
+++ src/main/java/org/owasp/esapi/LogFactory.java	(working copy)
@@ -1,60 +0,0 @@
-/**
- * OWASP Enterprise Security API (ESAPI)
- * 
- * This file is part of the Open Web Application Security Project (OWASP)
- * Enterprise Security API (ESAPI) project. For details, please see
- * <a href="http://www.owasp.org/index.php/ESAPI">http://www.owasp.org/index.php/ESAPI</a>.
- *
- * Copyright (c) 2007 - The OWASP Foundation
- * 
- * The ESAPI is published by OWASP under the BSD license. You should read and accept the
- * LICENSE before you use, modify, and/or redistribute this software.
- * 
- * @author Rogan Dawes<a href="http://www.aspectsecurity.com">Aspect Security</a>
- * @created 2008
- */
-package org.owasp.esapi;
-
-/**
- * The LogFactory interface is intended to allow substitution of various logging packages, while providing
- * a common interface to access them.
- * 
- * In the reference implementation, JavaLogFactory.java implements this interface.  JavaLogFactory.java also contains an 
- * inner class called JavaLogger which implements Logger.java and uses the Java logging package to log events. 
- * 
- * @see org.owasp.esapi.ESAPI
- * 
- * @author rdawes
- *
- */
-public interface LogFactory {
-	
-	/**
-	 * Gets the logger associated with the specified module name. The module name is used by the logger to log which 
-	 * module is generating the log events. The implementation of this method should return any preexisting Logger 
-	 * associated with this module name, rather than creating a new Logger.
-	 * <br><br>
-	 * The JavaLogFactory reference implementation meets these requirements.
-	 * 
-	 * @param moduleName
-	 * 			The name of the module requesting the logger.
-	 * @return
-	 * 			The Logger associated with this module.
-	 */
-	Logger getLogger(String moduleName);
-	
-	/**
-	 * Gets the logger associated with the specified class. The class is used by the logger to log which 
-	 * class is generating the log events. The implementation of this method should return any preexisting Logger 
-	 * associated with this class name, rather than creating a new Logger.
-	 * <br><br>
-	 * The JavaLogFactory reference implementation meets these requirements.
-	 * 
-	 * @param clazz
-	 * 			The name of the class requesting the logger.
-	 * @return
-	 * 			The Logger associated with this class.
-	 */
-	Logger getLogger(Class clazz);
-	
-}
Index: src/main/java/org/owasp/esapi/Logger.java
===================================================================
--- src/main/java/org/owasp/esapi/Logger.java	(revision 1961)
+++ src/main/java/org/owasp/esapi/Logger.java	(working copy)
@@ -1,423 +0,0 @@
-/**
- * OWASP Enterprise Security API (ESAPI)
- * 
- * This file is part of the Open Web Application Security Project (OWASP)
- * Enterprise Security API (ESAPI) project. For details, please see
- * <a href="http://www.owasp.org/index.php/ESAPI">http://www.owasp.org/index.php/ESAPI</a>.
- *
- * Copyright (c) 2007 - The OWASP Foundation
- * 
- * The ESAPI is published by OWASP under the BSD license. You should read and accept the
- * LICENSE before you use, modify, and/or redistribute this software.
- * 
- * @author Jeff Williams <a href="http://www.aspectsecurity.com">Aspect Security</a>
- * @created 2007
- */
-package org.owasp.esapi;
-
-
-/**
- * The Logger interface defines a set of methods that can be used to log
- * security events. It supports a hierarchy of logging levels which can be configured at runtime to determine
- * the severity of events that are logged, and those below the current threshold that are discarded.
- * Implementors should use a well established logging library
- * as it is quite difficult to create a high-performance logger.
- * <P>
- * The logging levels defined by this interface (in descending order) are:
- * <ul>
- * <li>fatal (highest value)</li>
- * <li>error</li>
- * <li>warning</li>
- * <li>info</li>
- * <li>debug</li>
- * <li>trace (lowest value)</li>
- * </ul>
- * There are also several variations of {@code always()} methods that will <i>always</i>
- * log a message regardless of the log level.
- * <p>
- * ESAPI also allows for the definition of the type of log event that is being generated.
- * The Logger interface predefines 6 types of Log events:
- * <ul>
- * <li>SECURITY_SUCCESS</li>
- * <li>SECURITY_FAILURE</li>
- * <li>SECURITY_AUDIT</li>
- * <li>EVENT_SUCCESS</li>
- * <li>EVENT_FAILURE</li>
- * <li>EVENT_UNSPECIFIED</li>
- * </ul>
- * <p>
- * Your implementation can extend or change this list if desired. 
- * <p>
- * This Logger allows callers to determine which logging levels are enabled, and to submit events 
- * at different severity levels.<br>
- * <br>Implementors of this interface should:
- * 
- * <ol>
- * <li>provide a mechanism for setting the logging level threshold that is currently enabled. This usually works by logging all 
- * events at and above that severity level, and discarding all events below that level.
- * This is usually done via configuration, but can also be made accessible programmatically.</li>
- * <li>ensure that dangerous HTML characters are encoded before they are logged to defend against malicious injection into logs 
- * that might be viewed in an HTML based log viewer.</li>
- * <li>encode any CRLF characters included in log data in order to prevent log injection attacks.</li>
- * <li>avoid logging the user's session ID. Rather, they should log something equivalent like a 
- * generated logging session ID, or a hashed value of the session ID so they can track session specific 
- * events without risking the exposure of a live session's ID.</li> 
- * <li>record the following information with each event:</li>
- *   <ol type="a">
- *   <li>identity of the user that caused the event,</li>
- *   <li>a description of the event (supplied by the caller),</li>
- *   <li>whether the event succeeded or failed (indicated by the caller),</li>
- *   <li>severity level of the event (indicated by the caller),</li>
- *   <li>that this is a security relevant event (indicated by the caller),</li>
- *   <li>hostname or IP where the event occurred (and ideally the user's source IP as well),</li>
- *   <li>a time stamp</li>
- *   </ol>
- * </ol>
- *  
- * Custom logger implementations might also:
- * <ol start="6">
- * <li>filter out any sensitive data specific to the current application or organization, such as credit cards, 
- * social security numbers, etc.</li>
- * </ol>
- * 
- * There are both Log4j and native Java Logging default implementations. JavaLogger uses the java.util.logging package as the basis for its logging 
- * implementation. Both default implementations implements requirements #1 thru #5 above.<br>
- * <br>
- * Customization: It is expected that most organizations will implement their own custom Logger class in 
- * order to integrate ESAPI logging with their logging infrastructure. The ESAPI Reference Implementation 
- * is intended to provide a simple functional example of an implementation.
- * 
- * @author Jeff Williams (jeff.williams .at. aspectsecurity.com) <a
- * href="http://www.aspectsecurity.com">Aspect Security</a>
- * @since June 1, 2007
- */
-public interface Logger {
-
-	/**
-     * A security type of log event that has succeeded. This is one of 6 predefined
-     * ESAPI logging events. New events can be added.
-     */
-	public static final EventType SECURITY_SUCCESS = new EventType( "SECURITY SUCCESS", true);
-
-	/**
-     * A security type of log event that has failed. This is one of 6 predefined
-     * ESAPI logging events. New events can be added.
-     */
-	public static final EventType SECURITY_FAILURE = new EventType( "SECURITY FAILURE", false);
-
-	/**
-	 * A security type of log event that is associated with an audit trail of some type,
-	 * but the log event is not specifically something that has either succeeded or failed
-	 * or that is irrelevant in the case of this logged message.
-	 */
-	// CHECKME: Should the Boolean for this be 'null' or 'true'? See EVENT_UNSPECIFIED.
-	public static final EventType SECURITY_AUDIT = new EventType( "SECURITY AUDIT", null);
-
-	/**
-     * A non-security type of log event that has succeeded. This is one of 6 predefined
-     * ESAPI logging events. New events can be added.
-     */
-	public static final EventType EVENT_SUCCESS = new EventType( "EVENT SUCCESS", true);
-	
-	/**
-     * A non-security type of log event that has failed. This is one of 6 predefined
-     * ESAPI logging events. New events can be added.
-     */
-	public static final EventType EVENT_FAILURE = new EventType( "EVENT FAILURE", false);
-
-	/**
-     * A non-security type of log event that is unspecified. This is one of 6 predefined
-     * ESAPI logging events. New events can be added.
-     */
-	public static final EventType EVENT_UNSPECIFIED = new EventType( "EVENT UNSPECIFIED", null);
-
-	/**
-	 * Defines the type of log event that is being generated. The Logger interface defines 6 types of Log events:
-	 * SECURITY_SUCCESS, SECURITY_FAILURE, EVENT_SUCCESS, EVENT_FAILURE, EVENT_UNSPECIFIED.
-     * Your implementation can extend or change this list if desired. 
-	 */
-	public class EventType {
-		
-		private String type;
-		private Boolean success = null;
-		
-		public EventType (String name, Boolean newSuccess) {
-			this.type = name;
-			this.success = newSuccess;
-		}
-		
-		public Boolean isSuccess() {
-			return success;
-		}
-		
-        /**
-         * Convert the {@code EventType} to a string.
-         * @return The event type name.
-         */
-		@Override
-        public String toString() {
-			return this.type;
-		}
-	}
-	
-	/*
-     * The Logger interface defines 6 logging levels: FATAL, ERROR, WARNING, INFO, DEBUG, TRACE. It also 
-     * supports ALL, which logs all events, and OFF, which disables all logging.
-     * Your implementation can extend or change this list if desired. 
-     */
-	
-	/** OFF indicates that no messages should be logged. This level is initialized to Integer.MAX_VALUE. */
-	public static final int OFF = Integer.MAX_VALUE;
-
-	/** FATAL indicates that only FATAL messages should be logged. This level is initialized to 1000. */
-	public static final int FATAL = 1000;
-
-	/** ERROR indicates that ERROR messages and above should be logged. 
-	 * This level is initialized to 800. */
-    public static final int ERROR = 800;
-
-    /** WARNING indicates that WARNING messages and above should be logged. 
-     * This level is initialized to 600. */
-    public static final int WARNING = 600;
-
-    /** INFO indicates that INFO messages and above should be logged. 
-     * This level is initialized to 400. */
-    public static final int INFO = 400;
-
-    /** DEBUG indicates that DEBUG messages and above should be logged. 
-     * This level is initialized to 200. */
-    public static final int DEBUG = 200;
-
-    /** TRACE indicates that TRACE messages and above should be logged. 
-     * This level is initialized to 100. */
-    public static final int TRACE = 100;
-
-    /** ALL indicates that all messages should be logged. This level is initialized to Integer.MIN_VALUE. */
-    public static final int ALL = Integer.MIN_VALUE;
-    
-
-    /**
-     * Dynamically set the ESAPI logging severity level. All events of this level and higher will be logged from 
-     * this point forward for all logs. All events below this level will be discarded.
-     * 
-     * @param level The level to set the logging level to. 
-     */
-    void setLevel(int level);
-    
-    /** Retrieve the current ESAPI logging level for this logger. See
-     * {@link org.owasp.esapi.reference.Log4JLogger} for an explanation of
-     * why this method is not simply called {@code getLevel()}.
-     * 
-     * @return The current logging level.
-     */
-    int getESAPILevel();
-    
-	/**
-     * Log a fatal event if 'fatal' level logging is enabled.
-     * 
-     * @param type 
-     * 		the type of event
-     * @param message 
-     * 		the message to log
-     */
-	void fatal(EventType type, String message);
-	
-	/**
-     * Log a fatal level security event if 'fatal' level logging is enabled 
-     * and also record the stack trace associated with the event.
-     * 
-     * @param type 
-     * 		the type of event
-     * @param message 
-     * 		the message to log
-     * @param throwable 
-     * 		the exception to be logged
-     */
-	void fatal(EventType type, String message, Throwable throwable);
-
-	/**
-	 * Allows the caller to determine if messages logged at this level
-	 * will be discarded, to avoid performing expensive processing.
-	 * 
-	 * @return true if fatal level messages will be output to the log
-	 */
-	boolean isFatalEnabled();
-
-	/**
-     * Log an error level security event if 'error' level logging is enabled.
-     * 
-     * @param type 
-     * 		the type of event 
-     * @param message 
-     * 		the message to log
-     */
-	void error(EventType type, String message);
-	
-	/**
-     * Log an error level security event if 'error' level logging is enabled 
-     * and also record the stack trace associated with the event.
-     * 
-     * @param type 
-     * 		the type of event
-     * @param message 
-     * 		the message to log
-     * @param throwable 
-     * 		the exception to be logged
-     */
-	void error(EventType type, String message, Throwable throwable);
-
-	/**
-	 * Allows the caller to determine if messages logged at this level
-	 * will be discarded, to avoid performing expensive processing.
-	 * 
-	 * @return true if error level messages will be output to the log
-	 */
-	boolean isErrorEnabled();
-
-	/**
-     * Log a warning level security event if 'warning' level logging is enabled.
-     * 
-     * @param type 
-     * 		the type of event 
-     * @param message 
-     * 		the message to log
-     */
-	void warning(EventType type, String message);
-	
-	/**
-     * Log a warning level security event if 'warning' level logging is enabled 
-     * and also record the stack trace associated with the event.
-     * 
-     * @param type 
-     * 		the type of event 
-     * @param message 
-     * 		the message to log
-     * @param throwable 
-     * 		the exception to be logged
-     */
-	void warning(EventType type, String message, Throwable throwable);
-
-	/**
-	 * Allows the caller to determine if messages logged at this level
-	 * will be discarded, to avoid performing expensive processing.
-	 * 
-	 * @return true if warning level messages will be output to the log
-	 */
-	boolean isWarningEnabled();
-
-	/**
-     * Log an info level security event if 'info' level logging is enabled.
-     * 
-     * @param type 
-     * 		the type of event 
-     * @param message 
-     * 		the message to log
-     */
-	void info(EventType type, String message);
-	
-	/**
-     * Log an info level security event if 'info' level logging is enabled 
-     * and also record the stack trace associated with the event.
-     * 
-     * @param type 
-     * 		the type of event
-     * @param message 
-     * 		the message to log
-     * @param throwable 
-     * 		the exception to be logged
-     */
-	void info(EventType type, String message, Throwable throwable);
-
-	/**
-	 * Allows the caller to determine if messages logged at this level
-	 * will be discarded, to avoid performing expensive processing.
-	 * 
-	 * @return true if info level messages will be output to the log
-	 */
-	boolean isInfoEnabled();
-
-	/**
-     * Log a debug level security event if 'debug' level logging is enabled.
-     * 
-     * @param type 
-     * 		the type of event
-     * @param message 
-     * 		the message to log
-     */
-	void debug(EventType type, String message);
-	
-	/**
-     * Log a debug level security event if 'debug' level logging is enabled 
-     * and also record the stack trace associated with the event.
-     * 
-     * @param type 
-     * 		the type of event
-     * @param message 
-     * 		the message to log
-     * @param throwable 
-     * 		the exception to be logged
-     */
-	void debug(EventType type, String message, Throwable throwable);
-
-	/**
-	 * Allows the caller to determine if messages logged at this level
-	 * will be discarded, to avoid performing expensive processing.
-	 * 
-	 * @return true if debug level messages will be output to the log
-	 */
-	boolean isDebugEnabled();
-
-	/**
-     * Log a trace level security event if 'trace' level logging is enabled.
-     * 
-     * @param type 
-     * 		the type of event
-     * @param message 
-     * 		the message to log
-     */
-	void trace(EventType type, String message);
-	
-	/**
-     * Log a trace level security event if 'trace' level logging is enabled 
-     * and also record the stack trace associated with the event.
-     * 
-     * @param type 
-     * 		the type of event 
-     * @param message 
-     * 		the message to log
-     * @param throwable 
-     * 		the exception to be logged
-     */
-	void trace(EventType type, String message, Throwable throwable);
-
-	/**
-	 * Allows the caller to determine if messages logged at this level
-	 * will be discarded, to avoid performing expensive processing.
-	 * 
-	 * @return true if trace level messages will be output to the log
-	 */
-	boolean isTraceEnabled();
-
-	/**
-     * Log an event regardless of what logging level is enabled.
-     * 
-     * @param type 
-     * 		the type of event
-     * @param message 
-     * 		the message to log
-     */
-	void always(EventType type, String message);
-	
-	/**
-     * Log an event regardless of what logging level is enabled
-     * and also record the stack trace associated with the event.
-     * 
-     * @param type 
-     * 		the type of event 
-     * @param message 
-     * 		the message to log
-     * @param throwable 
-     * 		the exception to be logged
-     */
-	void always(EventType type, String message, Throwable throwable);
-}
Index: src/main/java/org/owasp/esapi/codecs/Base64.java
===================================================================
--- src/main/java/org/owasp/esapi/codecs/Base64.java	(revision 1961)
+++ src/main/java/org/owasp/esapi/codecs/Base64.java	(working copy)
@@ -1,7 +1,8 @@
 package org.owasp.esapi.codecs;
 
 import org.owasp.esapi.ESAPI;
-import org.owasp.esapi.Logger;
+import org.slf4j.Logger;
+import org.slf4j.MarkerFactory;
 
 // CHECKME: Version at http://iharder.net/base64 is up to v2.3.3. Some semantic changes
 // starting with v2.3. Should we upgrade and then add ESAPI logging or stay at 2.2.2 base?
@@ -606,7 +607,7 @@
         }   // end try
         catch( java.io.IOException e )
         {
-            logger.error( Logger.SECURITY_FAILURE, "Problem writing object", e );
+            logger.error(ESAPI.getSecurityFailureMarker(), "Problem writing object", e );
             return null;
         }   // end catch
         finally
@@ -739,7 +740,7 @@
             }   // end try
             catch( java.io.IOException e )
             {
-                logger.error( Logger.SECURITY_FAILURE, "Problem writing gzip stream", e );
+                logger.error( ESAPI.getSecurityFailureMarker(), "Problem writing gzip stream", e );
                 return null;
             }   // end catch
             finally
@@ -896,11 +897,11 @@
             }catch( Exception e){
             	
         // Remove these after checking -- for context only.
-                // logger.error( Logger.SECURITY_FAILURE, "Problem writing object", e );
-                // logger.error( Logger.SECURITY_FAILURE, ""+source[srcOffset]+ ": " + ( DECODABET[ source[ srcOffset     ] ]  ) );
-                // logger.error( Logger.SECURITY_FAILURE, ""+source[srcOffset+1]+  ": " + ( DECODABET[ source[ srcOffset + 1 ] ]  ) );
-                // logger.error( Logger.SECURITY_FAILURE, ""+source[srcOffset+2]+  ": " + ( DECODABET[ source[ srcOffset + 2 ] ]  ) );
-                // logger.error( Logger.SECURITY_FAILURE, ""+source[srcOffset+3]+  ": " + ( DECODABET[ source[ srcOffset + 3 ] ]  ) );
+                // logger.error( ESAPI.getSecurityMarker(), "Problem writing object", e );
+                // logger.error( ESAPI.getSecurityMarker(), ""+source[srcOffset]+ ": " + ( DECODABET[ source[ srcOffset     ] ]  ) );
+                // logger.error( ESAPI.getSecurityMarker(), ""+source[srcOffset+1]+  ": " + ( DECODABET[ source[ srcOffset + 1 ] ]  ) );
+                // logger.error( ESAPI.getSecurityMarker(), ""+source[srcOffset+2]+  ": " + ( DECODABET[ source[ srcOffset + 2 ] ]  ) );
+                // logger.error( ESAPI.getSecurityMarker(), ""+source[srcOffset+3]+  ": " + ( DECODABET[ source[ srcOffset + 3 ] ]  ) );
             	
             	// CHECKME: I replaced the 5 separate logger.error() calls above with a single logger.error() call so they can't
             	// become interleaved with other log entries from other threads. Normally this would have placed log entries
@@ -916,7 +917,7 @@
                 sb.append( source[srcOffset+2] ).append(": ").append( ( DECODABET[ source[ srcOffset + 2 ] ]  ) ).append(EOL);
                 sb.append( source[srcOffset+3] ).append(": ").append( ( DECODABET[ source[ srcOffset + 3 ] ]  ) ).append(EOL);
                 
-                logger.error( Logger.SECURITY_FAILURE, sb.toString(), e );
+                logger.error( ESAPI.getSecurityFailureMarker(), sb.toString(), e );
                 return -1;
             }   // end catch
         }
@@ -975,7 +976,7 @@
             }   // end if: white space, equals sign or better
             else
             {
-            	logger.error( Logger.SECURITY_FAILURE, "Bad Base64 input character at " + i + ": " + source[i] + "(decimal)" );
+            	logger.error( ESAPI.getSecurityFailureMarker(), "Bad Base64 input character at " + i + ": " + source[i] + "(decimal)" );
                 return null;
             }   // end else: 
         }   // each input character
@@ -1024,7 +1025,7 @@
             // CHECKME: Is this correct? I think it should be a warning instead of an error since nothing
             // is re-thrown. I do think that *some* sort of logging is in order here  especially since UTF-8 should
             // always be available on all platforms. If it's not, then all bets are off on your runtime env. - Kevin Wall
-            logger.warning( Logger.SECURITY_FAILURE, "Problem decoding string using " +
+            logger.warn( ESAPI.getSecurityFailureMarker(), "Problem decoding string using " +
             			  PREFERRED_ENCODING + "; substituting native platform encoding instead", uee );
         }
         
@@ -1107,12 +1108,12 @@
         }   // end try
         catch( java.io.IOException e )
         {
-            logger.error( Logger.SECURITY_FAILURE, "Problem reading object", e );
+            logger.error( ESAPI.getSecurityFailureMarker(), "Problem reading object", e );
             obj = null;
         }   // end catch
         catch( java.lang.ClassNotFoundException e )
         {
-            logger.error( Logger.SECURITY_FAILURE, "Problem reading object", e );
+            logger.error( ESAPI.getSecurityFailureMarker(), "Problem reading object", e );
             obj = null;
         }   // end catch
         finally
@@ -1219,7 +1220,7 @@
             // Check for size of file
             if( file.length() > Integer.MAX_VALUE )
             {
-                logger.error( Logger.SECURITY_FAILURE, "File is too big for this convenience method (" + file.length() + " bytes)." );
+                logger.error( ESAPI.getSecurityFailureMarker(), "File is too big for this convenience method (" + file.length() + " bytes)." );
                 return null;
             }   // end if: file too big for int index
             buffer = new byte[ (int)file.length() ];
@@ -1240,7 +1241,7 @@
         }   // end try
         catch( java.io.IOException e )
         {
-            logger.error( Logger.SECURITY_FAILURE, "Error decoding from file " + filename, e );
+            logger.error( ESAPI.getSecurityFailureMarker(), "Error decoding from file " + filename, e );
         }   // end catch: IOException
         finally
         {
@@ -1288,7 +1289,7 @@
         }   // end try
         catch( java.io.IOException e )
         {
-            logger.error( Logger.SECURITY_FAILURE, "Error encoding from file " + filename, e );
+            logger.error( ESAPI.getSecurityFailureMarker(), "Error encoding from file " + filename, e );
         }   // end catch: IOException
         finally
         {
@@ -1327,7 +1328,7 @@
             }   // end while: through file
             success = true;
         } catch( java.io.IOException exc ){
-            logger.error( Logger.SECURITY_FAILURE, "Problem encoding file to file", exc );
+            logger.error( ESAPI.getSecurityFailureMarker(), "Problem encoding file to file", exc );
         } finally{
             try{ in.close();  } catch( Exception exc ){}
             try{ out.close(); } catch( Exception exc ){}
@@ -1364,7 +1365,7 @@
             }   // end while: through file
             success = true;
         } catch( java.io.IOException exc ){
-            logger.error( Logger.SECURITY_FAILURE, "Problem decoding file to file", exc );
+            logger.error( ESAPI.getSecurityFailureMarker(), "Problem decoding file to file", exc );
         } finally{
             try{ in.close();  } catch( Exception exc ){}
             try{ out.close(); } catch( Exception exc ){}
Index: src/main/java/org/owasp/esapi/crypto/CipherText.java
===================================================================
--- src/main/java/org/owasp/esapi/crypto/CipherText.java	(revision 1961)
+++ src/main/java/org/owasp/esapi/crypto/CipherText.java	(working copy)
@@ -24,8 +24,8 @@
 
 import org.owasp.esapi.ESAPI;
 import org.owasp.esapi.Encryptor;
-import org.owasp.esapi.Logger;
 import org.owasp.esapi.errors.EncryptionException;
+import org.slf4j.Logger;
 
 // CHECKME: Some of these assertions probably should be actual runtime checks
 //          with suitable exceptions to account for cases where programmers
@@ -266,7 +266,7 @@
         if ( isCollected(CipherTextFlags.INITVECTOR) ) {
             return cipherSpec_.getIV();
         } else {
-            logger.error(Logger.SECURITY_FAILURE, "IV not set yet; unable to retrieve; returning null");
+            logger.error(ESAPI.getSecurityFailureMarker(), "IV not set yet; unable to retrieve; returning null");
             return null;
         }
     }
@@ -292,7 +292,7 @@
 	        System.arraycopy(raw_ciphertext_, 0, copy, 0, raw_ciphertext_.length);
 	        return copy;
 	    } else {
-	        logger.error(Logger.SECURITY_FAILURE, "Raw ciphertext not set yet; unable to retrieve; returning null");
+	        logger.error(ESAPI.getSecurityFailureMarker(), "Raw ciphertext not set yet; unable to retrieve; returning null");
 	        return null;
 	    }
 	}
@@ -354,7 +354,7 @@
 	        // Then return the base64 encoded result
 	        return ESAPI.encoder().encodeForBase64(ivPlusCipherText, false);
 	    } else {
-	        logger.error(Logger.SECURITY_FAILURE, "Raw ciphertext and/or IV not set yet; unable to retrieve; returning null");
+	        logger.error(ESAPI.getSecurityFailureMarker(), "Raw ciphertext and/or IV not set yet; unable to retrieve; returning null");
 	        return null;
 	    }
 	}
@@ -465,7 +465,7 @@
 	    		// This *used* to be the case (for versions 2.0 and 2.0.1) where we tried to
 	    		// accomodate the deprecated decrypt() method from ESAPI 1.4. Unfortunately,
 	    		// that was an EPIC FAIL. (See Google Issue # 306 for details.)
-	        logger.warning(Logger.SECURITY_FAILURE, "MAC may have been tampered with (e.g., length set to 0).");
+	        logger.warn(ESAPI.getSecurityFailureMarker(), "MAC may have been tampered with (e.g., length set to 0).");
 	        return false;    // Deprecated decrypt() method removed, so now return false.
 	    }
 	}
@@ -522,7 +522,7 @@
                                               "Ciphertext may not be null or 0 length!");
             }
             if ( isCollected(CipherTextFlags.CIPHERTEXT) ) {
-                logger.warning(Logger.SECURITY_FAILURE, "Raw ciphertext was already set; resetting.");
+                logger.warn(ESAPI.getSecurityFailureMarker(), "Raw ciphertext was already set; resetting.");
             }
             raw_ciphertext_ = new byte[ ciphertext.length ];
             CryptoHelper.copyByteArray(ciphertext, raw_ciphertext_);
@@ -530,7 +530,7 @@
             setEncryptionTimestamp();
         } else {
             String logMsg = "Programming error: Attempt to set ciphertext after MAC already computed.";
-            logger.error(Logger.SECURITY_FAILURE, logMsg);
+            logger.error(ESAPI.getSecurityFailureMarker(), logMsg);
             throw new EncryptionException("MAC already set; cannot store new raw ciphertext", logMsg);
         }
     }
@@ -545,10 +545,10 @@
         throws EncryptionException
     {
         if ( isCollected(CipherTextFlags.INITVECTOR) ) {
-            logger.warning(Logger.SECURITY_FAILURE, "IV was already set; resetting.");
+            logger.warn(ESAPI.getSecurityFailureMarker(), "IV was already set; resetting.");
         }
         if ( isCollected(CipherTextFlags.CIPHERTEXT) ) {
-            logger.warning(Logger.SECURITY_FAILURE, "Raw ciphertext was already set; resetting.");
+            logger.warn(ESAPI.getSecurityFailureMarker(), "Raw ciphertext was already set; resetting.");
         }
         if ( ! macComputed() ) {
             if ( ciphertext == null || ciphertext.length == 0 ) {
@@ -569,7 +569,7 @@
             setCiphertext( ciphertext );
         } else {
             String logMsg = "MAC already computed from previously set IV and raw ciphertext; may not be reset -- object is immutable.";
-            logger.error(Logger.SECURITY_FAILURE, logMsg);  // Discuss: By throwing, this gets logged as warning, but it's really error! Why is an exception only a warning???
+            logger.error(ESAPI.getSecurityFailureMarker(), logMsg);  // Discuss: By throwing, this gets logged as warning, but it's really error! Why is an exception only a warning???
             throw new EncryptionException("Validation of decryption failed.", logMsg);
         }
     }
@@ -614,7 +614,7 @@
         // from a serialized CipherText object, we want to keep the original
         // encryption timestamp.
         if ( encryption_timestamp_ != 0 ) {
-            logger.warning(Logger.EVENT_FAILURE, "Attempt to reset non-zero " +
+            logger.warn(ESAPI.getEventFailureMarker(), "Attempt to reset non-zero " +
                     "CipherText encryption timestamp to current time!");
         }
         encryption_timestamp_ = System.currentTimeMillis();
@@ -631,7 +631,7 @@
     void setEncryptionTimestamp(long timestamp) {
         assert timestamp > 0 : "Timestamp must be greater than zero.";
         if ( encryption_timestamp_ == 0 ) {     // Only set it if it's not yet been set.
-            logger.warning(Logger.EVENT_FAILURE, "Attempt to reset non-zero " +
+            logger.warn(ESAPI.getEventFailureMarker(), "Attempt to reset non-zero " +
                            "CipherText encryption timestamp to " + new Date(timestamp) + "!");
         }
         encryption_timestamp_ = timestamp;
@@ -695,13 +695,13 @@
                           CryptoHelper.arrayCompare(this.separate_mac_, that.separate_mac_) &&
                           this.encryption_timestamp_ == that.encryption_timestamp_ );
             } else {
-                logger.warning(Logger.EVENT_FAILURE, "CipherText.equals(): Cannot compare two " +
+                logger.warn(ESAPI.getEventFailureMarker(), "CipherText.equals(): Cannot compare two " +
                                "CipherText objects that are not complete, and therefore immutable!");
-                logger.info(Logger.EVENT_FAILURE, "This CipherText: " + this.collectedAll() + ";" +
+                logger.info(ESAPI.getEventFailureMarker(), "This CipherText: " + this.collectedAll() + ";" +
                             "other CipherText: " + that.collectedAll());
-                logger.info(Logger.EVENT_FAILURE, "CipherText.equals(): Progress comparison: " +
+                logger.info(ESAPI.getEventFailureMarker(), "CipherText.equals(): Progress comparison: " +
                                ((this.progress == that.progress) ? "Same" : "Different"));
-                logger.info(Logger.EVENT_FAILURE, "CipherText.equals(): Status this: " + this.progress +
+                logger.info(ESAPI.getEventFailureMarker(), "CipherText.equals(): Status this: " + this.progress +
                                "; status other CipherText object: " + that.progress);
                 // CHECKME: Perhaps we should throw a RuntimeException instead???
                 return false;
@@ -715,7 +715,7 @@
      */
     @Override public int hashCode() {
         if ( this.collectedAll() ) {
-                logger.warning(Logger.EVENT_FAILURE, "CipherText.hashCode(): Cannot compute " +
+                logger.warn(ESAPI.getEventFailureMarker(), "CipherText.hashCode(): Cannot compute " +
                                "hachCode() of incomplete CipherText object; object not immutable- " +
                                "returning 0.");
                 // CHECKME: Throw RuntimeException instead?
@@ -786,10 +786,10 @@
             byte[] result = mac.doFinal( getRawCipherText() );
             return result;
         } catch (NoSuchAlgorithmException e) {
-            logger.error(Logger.SECURITY_FAILURE, "Cannot compute MAC w/out HmacSHA1.", e);
+            logger.error(ESAPI.getSecurityFailureMarker(), "Cannot compute MAC w/out HmacSHA1.", e);
             return null;
         } catch (InvalidKeyException e) {
-            logger.error(Logger.SECURITY_FAILURE, "Cannot comput MAC; invalid 'key' for HmacSHA1.", e);
+            logger.error(ESAPI.getSecurityFailureMarker(), "Cannot comput MAC; invalid 'key' for HmacSHA1.", e);
             return null;
         }
     }
Index: src/main/java/org/owasp/esapi/crypto/CipherTextSerializer.java
===================================================================
--- src/main/java/org/owasp/esapi/crypto/CipherTextSerializer.java	(revision 1961)
+++ src/main/java/org/owasp/esapi/crypto/CipherTextSerializer.java	(working copy)
@@ -8,9 +8,9 @@
 import java.util.Date;
 
 import org.owasp.esapi.ESAPI;
-import org.owasp.esapi.Logger;
 import org.owasp.esapi.util.ByteConversionUtil;
 import org.owasp.esapi.errors.EncryptionException;
+import org.slf4j.Logger;
 
 /**
  * Helper class to assist with programming language and platform independent
@@ -208,7 +208,7 @@
             // Should never happen. UTF8 is built into the rt.jar. We don't use native encoding as
             // a fall-back because that simply is not guaranteed to be portable across Java
             // platforms and could cause really bizarre errors way downstream.
-            logger.error(Logger.EVENT_FAILURE, "Ignoring caught UnsupportedEncodingException " +
+            logger.error(ESAPI.getEventFailureMarker(), "Ignoring caught UnsupportedEncodingException " +
                            "converting string to UTF8 encoding. Results suspect. Corrupt rt.jar????");
         }
     }
@@ -409,7 +409,7 @@
 
 	private void debug(String msg) {
         if ( logger.isDebugEnabled() ) {
-            logger.debug(Logger.EVENT_SUCCESS, msg);
+            logger.debug(ESAPI.getEventsuccessMarker(), msg);
         }
     }
 }
Index: src/main/java/org/owasp/esapi/crypto/CryptoHelper.java
===================================================================
--- src/main/java/org/owasp/esapi/crypto/CryptoHelper.java	(revision 1961)
+++ src/main/java/org/owasp/esapi/crypto/CryptoHelper.java	(working copy)
@@ -22,8 +22,8 @@
 import javax.crypto.spec.SecretKeySpec;
 
 import org.owasp.esapi.ESAPI;
-import org.owasp.esapi.Logger;
 import org.owasp.esapi.errors.EncryptionException;
+import org.slf4j.Logger;
 
 /**
  * Class to provide some convenience methods for encryption, decryption, etc.
@@ -250,7 +250,7 @@
                 // Error on side of security. If this fails and can't verify MAC
                 // assume it is invalid. Note that CipherText.toString() does not
                 // print the actual ciphertext.
-                logger.warning(Logger.SECURITY_FAILURE, "Unable to validate MAC for ciphertext " + ct, ex);
+                logger.warn(ESAPI.getSecurityFailureMarker(), "Unable to validate MAC for ciphertext " + ct, ex);
                 return false;
             }
         }
@@ -375,7 +375,7 @@
 		if ( ret ) {
 			return ret;				// True
 		} else {					// False, so throw or not.
-			logger.warning(Logger.SECURITY_FAILURE, "Possible data tampering. Encountered invalid KDF version #. " +
+			logger.warn(ESAPI.getSecurityFailureMarker(), "Possible data tampering. Encountered invalid KDF version #. " +
 						   ( throwIfError ? "Throwing IllegalArgumentException" : "" ));
 			if ( throwIfError ) {	
 				throw new IllegalArgumentException("Version (" + kdfVers + ") invalid. " +
Index: src/main/java/org/owasp/esapi/crypto/CryptoToken.java
===================================================================
--- src/main/java/org/owasp/esapi/crypto/CryptoToken.java	(revision 1961)
+++ src/main/java/org/owasp/esapi/crypto/CryptoToken.java	(working copy)
@@ -30,10 +30,10 @@
 
 import org.owasp.esapi.ESAPI;
 import org.owasp.esapi.Encryptor;
-import org.owasp.esapi.Logger;
 import org.owasp.esapi.errors.EncodingException;
 import org.owasp.esapi.errors.EncryptionException;
 import org.owasp.esapi.errors.ValidationException;
+import org.slf4j.Logger;
 
 ///// IMPORTANT NOTE: Never print / log attribute *values* as they
 /////                 may be sensitive. Also, do not log the CryptoToken
@@ -542,7 +542,7 @@
             String key = entry.getKey();
             String value = entry.getValue();
             // Because attribute values may be confidential, we don't want to log them!
-            logger.debug(Logger.EVENT_UNSPECIFIED, "   " + key + " -> <not shown>");
+            logger.debug(ESAPI.getEventunspecifiedMarker(), "   " + key + " -> <not shown>");
             sb.append(key + "=" + quoteAttributeValue( value ) + DELIM);
         }
         return sb.toString();
@@ -654,7 +654,7 @@
         
         Object[] objArray = fields.toArray();
         assert fieldNo == objArray.length : "Program error: Mismatch of delimited field count.";
-        logger.debug(Logger.EVENT_UNSPECIFIED, "Found " + objArray.length + " fields.");
+        logger.debug(ESAPI.getEventunspecifiedMarker(), "Found " + objArray.length + " fields.");
         assert objArray.length >= 2 : "Missing mandatory fields from decrypted token (username &/or expiration time).";
         username = ((String)(objArray[0])).toLowerCase();
         String expTime = (String)objArray[1];
@@ -671,7 +671,7 @@
             String quotedValue = nvpair.substring(equalsAt + 1);
             String value = parseQuotedValue( quotedValue );
             // Because attribute values may be confidential, we don't want to log them!
-            logger.debug(Logger.EVENT_UNSPECIFIED, "Attribute[" + i + "]: name=" + name + ", value=<not shown>");
+            logger.debug(ESAPI.getEventunspecifiedMarker(), "Attribute[" + i + "]: name=" + name + ", value=<not shown>");
 
             // Check to make sure that attribute name is valid as per our regex.
             Matcher attrNameChecker = attrNameRegex.matcher(name);
Index: src/main/java/org/owasp/esapi/crypto/KeyDerivationFunction.java
===================================================================
--- src/main/java/org/owasp/esapi/crypto/KeyDerivationFunction.java	(revision 1961)
+++ src/main/java/org/owasp/esapi/crypto/KeyDerivationFunction.java	(working copy)
@@ -18,11 +18,11 @@
 import javax.crypto.spec.SecretKeySpec;
 
 import org.owasp.esapi.ESAPI;
-import org.owasp.esapi.Logger;
 import org.owasp.esapi.errors.ConfigurationException;
 import org.owasp.esapi.errors.EncryptionException;
 import org.owasp.esapi.reference.DefaultSecurityConfiguration;
 import org.owasp.esapi.util.ByteConversionUtil;
+import org.slf4j.Logger;
 
 /**
  * This class implements a Key Derivation Function (KDF) and supporting methods.
@@ -333,7 +333,7 @@
 			mac = Mac.getInstance("HmacSHA1");
 			mac.init(sk);
 		} catch( InvalidKeyException ex ) {
-			logger.error(Logger.SECURITY_FAILURE,
+			logger.error(ESAPI.getSecurityFailureMarker(),
 					"Created HmacSHA1 Mac but SecretKey sk has alg " +
 					sk.getAlgorithm(), ex);
 			throw ex;
Index: src/main/java/org/owasp/esapi/crypto/PlainText.java
===================================================================
--- src/main/java/org/owasp/esapi/crypto/PlainText.java	(revision 1961)
+++ src/main/java/org/owasp/esapi/crypto/PlainText.java	(working copy)
@@ -4,7 +4,7 @@
 import java.io.UnsupportedEncodingException;
 
 import org.owasp.esapi.ESAPI;
-import org.owasp.esapi.Logger;
+import org.slf4j.Logger;
 
 /**
  * A class representing plaintext (versus ciphertext) as related to
@@ -49,7 +49,7 @@
 			rawBytes = str.getBytes("UTF-8");
 		} catch (UnsupportedEncodingException e) {
 			// Should never happen.
-			logger.error(Logger.EVENT_FAILURE, "PlainText(String) CTOR failed: Can't find UTF-8 byte-encoding!", e);
+			logger.error(ESAPI.getEventFailureMarker(), "PlainText(String) CTOR failed: Can't find UTF-8 byte-encoding!", e);
 			throw new RuntimeException("Can't find UTF-8 byte-encoding!", e);
 		}
 	}
@@ -76,7 +76,7 @@
 			return new String(rawBytes, "UTF-8");
 		} catch (UnsupportedEncodingException e) {
 			// Should never happen.
-			logger.error(Logger.EVENT_FAILURE, "PlainText.toString() failed: Can't find UTF-8 byte-encoding!", e);
+			logger.error(ESAPI.getEventFailureMarker(), "PlainText.toString() failed: Can't find UTF-8 byte-encoding!", e);
 			throw new RuntimeException("Can't find UTF-8 byte-encoding!", e);
 		}
 	}
Index: src/main/java/org/owasp/esapi/crypto/SecurityProviderLoader.java
===================================================================
--- src/main/java/org/owasp/esapi/crypto/SecurityProviderLoader.java	(revision 1961)
+++ src/main/java/org/owasp/esapi/crypto/SecurityProviderLoader.java	(working copy)
@@ -6,7 +6,7 @@
 import java.util.Hashtable;
 
 import org.owasp.esapi.ESAPI;
-import org.owasp.esapi.Logger;
+import org.slf4j.Logger;
 
 /** 
  * This class provides a generic static method that loads a
@@ -196,7 +196,7 @@
                 if (pos == -1) {
                     // The just wanted it available (loaded last) and it is, so
                     // this is not critical.
-                    logger.always(Logger.SECURITY_SUCCESS, msg);
+                    logger.info(ESAPI.getSecuritySuccessMarker(), msg);
                 } else {
                     // In this case, it's a warning because it may have already
                     // been loaded, but *after* the position they requested.
@@ -206,12 +206,12 @@
                     // compliant. Therefore, we make it a warning and a failure.
                 	// Also log separately using 'always' in case warnings suppressed
                 	// as per NSA suggestion.
-                    logger.warning(Logger.SECURITY_FAILURE, msg);
-                    logger.always(Logger.SECURITY_FAILURE, "(audit) " + msg);
+                    logger.warn(ESAPI.getSecurityFailureMarker(), msg);
+                    logger.info(ESAPI.getSecurityFailureMarker(), "(audit) " + msg);
                 }
             } else {
             	// As per NSA suggestion.
-                logger.always(Logger.SECURITY_AUDIT,
+                logger.info(ESAPI.getSecuritySuccessMarker(),
                         "Successfully loaded preferred JCE provider " +
                         algProvider + " at position " + pos);
             }
@@ -222,7 +222,7 @@
         	// prohibits Security.addProvider() or Security.insertProviderAt()
         	// by the current user of this thread. Will log it here. Can always
         	// be ignored.
-        	logger.always(Logger.SECURITY_FAILURE, "Failed to load preferred JCE provider " +
+        	logger.info(ESAPI.getSecurityFailureMarker(), "Failed to load preferred JCE provider " +
         				  algProvider + " at position " + pos, ex);
             throw ex;
         } catch(Exception ex) {
@@ -233,7 +233,7 @@
             // since that what it probably really implied here. This probably a configuration
         	// error (e.g., classpath problem, etc.) so we use EVENT_FAILURE rather than
         	// SECURITY_FAILURE here.
-            logger.error(Logger.EVENT_FAILURE, "Failed to insert failed crypto " +
+            logger.error(ESAPI.getEventFailureMarker(), "Failed to insert failed crypto " +
                     " provider " + algProvider + " at position " + pos, ex);
             throw new NoSuchProviderException("Failed to insert crypto " +
                                        " provider for " + algProvider +
@@ -268,7 +268,7 @@
             // If unset or set to empty string, then don't try to change it.
             if ( prefJCEProvider == null || prefJCEProvider.trim().length() == 0) {
             		// Always log, per NSA suggestion.
-                logger.always(Logger.SECURITY_AUDIT, "No Encryptor.PreferredJCEProvider specified.");
+                logger.info(ESAPI.getSecurityFailureMarker(), "No Encryptor.PreferredJCEProvider specified.");
                 return -1;  // Unchanged; it is, whatever it is.
             } else {
                 return insertProviderAt(prefJCEProvider, 1);
@@ -276,8 +276,7 @@
         } catch (NoSuchProviderException ex) {
             // Will already have logged with exception msg.
         	String msg = "failed to load *preferred* " + "JCE crypto provider, " + prefJCEProvider;
-        	logger.always(Logger.SECURITY_AUDIT, msg);	// Per NSA suggestion.
-            logger.error(Logger.SECURITY_FAILURE, msg);
+            logger.error(ESAPI.getSecurityFailureMarker(), msg);
             throw ex;
         }
     }
Index: src/main/java/org/owasp/esapi/errors/EnterpriseSecurityException.java
===================================================================
--- src/main/java/org/owasp/esapi/errors/EnterpriseSecurityException.java	(revision 1961)
+++ src/main/java/org/owasp/esapi/errors/EnterpriseSecurityException.java	(working copy)
@@ -16,7 +16,7 @@
 package org.owasp.esapi.errors;
 
 import org.owasp.esapi.ESAPI;
-import org.owasp.esapi.Logger;
+import org.slf4j.Logger;
 
 
 /**
Index: src/main/java/org/owasp/esapi/errors/EnterpriseSecurityRuntimeException.java
===================================================================
--- src/main/java/org/owasp/esapi/errors/EnterpriseSecurityRuntimeException.java	(revision 1961)
+++ src/main/java/org/owasp/esapi/errors/EnterpriseSecurityRuntimeException.java	(working copy)
@@ -16,7 +16,7 @@
 package org.owasp.esapi.errors;
 
 import org.owasp.esapi.ESAPI;
-import org.owasp.esapi.Logger;
+import org.slf4j.Logger;
 
 
 /**
Index: src/main/java/org/owasp/esapi/errors/IntrusionException.java
===================================================================
--- src/main/java/org/owasp/esapi/errors/IntrusionException.java	(revision 1961)
+++ src/main/java/org/owasp/esapi/errors/IntrusionException.java	(working copy)
@@ -16,7 +16,7 @@
 package org.owasp.esapi.errors;
 
 import org.owasp.esapi.ESAPI;
-import org.owasp.esapi.Logger;
+import org.slf4j.Logger;
 
 /**
  * An IntrusionException should be thrown anytime an error condition arises that is likely to be the result of an attack
@@ -52,7 +52,7 @@
     public IntrusionException(String userMessage, String logMessage) {
         super(userMessage);
         this.logMessage = logMessage;
-        logger.error(Logger.SECURITY_FAILURE, "INTRUSION - " + logMessage);
+        logger.error(ESAPI.getSecurityFailureMarker(), "INTRUSION - " + logMessage);
     }
 
     /**
@@ -68,7 +68,7 @@
     public IntrusionException(String userMessage, String logMessage, Throwable cause) {
         super(userMessage, cause);
         this.logMessage = logMessage;
-        logger.error(Logger.SECURITY_FAILURE, "INTRUSION - " + logMessage, cause);
+        logger.error(ESAPI.getSecurityFailureMarker(), "INTRUSION - " + logMessage, cause);
     }
 
     /**
Index: src/main/java/org/owasp/esapi/filters/ESAPIFilter.java
===================================================================
--- src/main/java/org/owasp/esapi/filters/ESAPIFilter.java	(revision 1961)
+++ src/main/java/org/owasp/esapi/filters/ESAPIFilter.java	(working copy)
@@ -28,7 +28,7 @@
 import javax.servlet.http.HttpServletResponse;
 
 import org.owasp.esapi.ESAPI;
-import org.owasp.esapi.Logger;
+import org.slf4j.Logger;
 import org.owasp.esapi.errors.AuthenticationException;
 
 /**
@@ -116,7 +116,7 @@
 			ESAPI.httpUtilities().setNoCacheHeaders( response );
             
 		} catch (Exception e) {
-			logger.error( Logger.SECURITY_FAILURE, "Error in ESAPI security filter: " + e.getMessage(), e );
+			logger.error( ESAPI.getSecurityFailureMarker(), "Error in ESAPI security filter: " + e.getMessage(), e );
 			request.setAttribute("message", e.getMessage() );
 			
 		} finally {
Index: src/main/java/org/owasp/esapi/filters/SecurityWrapper.java
===================================================================
--- src/main/java/org/owasp/esapi/filters/SecurityWrapper.java	(revision 1961)
+++ src/main/java/org/owasp/esapi/filters/SecurityWrapper.java	(working copy)
@@ -27,7 +27,7 @@
 import javax.servlet.http.HttpServletResponse;
 
 import org.owasp.esapi.ESAPI;
-import org.owasp.esapi.Logger;
+import org.slf4j.Logger;
 import org.owasp.esapi.StringUtilities;
 
 
@@ -106,7 +106,7 @@
 
             chain.doFilter(ESAPI.currentRequest(), ESAPI.currentResponse());
         } catch (Exception e) {
-            logger.error( Logger.SECURITY_FAILURE, "Error in SecurityWrapper: " + e.getMessage(), e );
+            logger.error( ESAPI.getSecurityFailureMarker(), "Error in SecurityWrapper: " + e.getMessage(), e );
             request.setAttribute("message", e.getMessage() );
         } finally {
             // VERY IMPORTANT
Index: src/main/java/org/owasp/esapi/filters/SecurityWrapperRequest.java
===================================================================
--- src/main/java/org/owasp/esapi/filters/SecurityWrapperRequest.java	(revision 1961)
+++ src/main/java/org/owasp/esapi/filters/SecurityWrapperRequest.java	(working copy)
@@ -34,7 +34,7 @@
 import javax.servlet.http.HttpSession;
 
 import org.owasp.esapi.ESAPI;
-import org.owasp.esapi.Logger;
+import org.slf4j.Logger;
 import org.owasp.esapi.errors.ValidationException;
 import org.owasp.esapi.errors.AccessControlException;
 
@@ -164,7 +164,7 @@
                 }
                 newCookies.add(n);
             } catch (ValidationException e) {
-                logger.warning(Logger.SECURITY_FAILURE, "Skipping bad cookie: " + c.getName() + "=" + c.getValue(), e );
+                logger.warn(ESAPI.getSecurityFailureMarker(), "Skipping bad cookie: " + c.getName() + "=" + c.getValue(), e );
             }
         }
         return newCookies.toArray(new Cookie[newCookies.size()]);
@@ -437,7 +437,7 @@
                 String cleanValue = ESAPI.validator().getValidInput("HTTP parameter value: " + value, value, "HTTPParameterValue", 2000, true);
                 newValues.add(cleanValue);
             } catch (ValidationException e) {
-                logger.warning(Logger.SECURITY_FAILURE, "Skipping bad parameter");
+                logger.warn(ESAPI.getSecurityFailureMarker(), "Skipping bad parameter");
             }
         }
         return newValues.toArray(new String[newValues.size()]);
@@ -659,7 +659,7 @@
 	public int getServerPort() {
 		int port = getHttpServletRequest().getServerPort();
 		if ( port < 0 || port > 0xFFFF ) {
-			logger.warning( Logger.SECURITY_FAILURE, "HTTP server port out of range: " + port );
+			logger.warn( ESAPI.getSecurityFailureMarker(), "HTTP server port out of range: " + port );
 			port = 0;
 		}
 		return port;
Index: src/main/java/org/owasp/esapi/filters/SecurityWrapperResponse.java
===================================================================
--- src/main/java/org/owasp/esapi/filters/SecurityWrapperResponse.java	(revision 1961)
+++ src/main/java/org/owasp/esapi/filters/SecurityWrapperResponse.java	(working copy)
@@ -23,7 +23,7 @@
 import javax.servlet.http.HttpServletResponseWrapper;
 
 import org.owasp.esapi.ESAPI;
-import org.owasp.esapi.Logger;
+import org.slf4j.Logger;
 import org.owasp.esapi.StringUtilities;
 import org.owasp.esapi.ValidationErrorList;
 import org.owasp.esapi.errors.IntrusionException;
@@ -96,13 +96,13 @@
 
         // if there was an error
         if (mode.equals("skip")) {
-            logger.warning(Logger.SECURITY_FAILURE, "Attempt to add unsafe data to cookie (skip mode). Skipping cookie and continuing.");
+            logger.warn(ESAPI.getSecurityFailureMarker(), "Attempt to add unsafe data to cookie (skip mode). Skipping cookie and continuing.");
             return;
         }
 
         // add the original cookie to the response and continue
         if (mode.equals("log")) {
-            logger.warning(Logger.SECURITY_FAILURE, "Attempt to add unsafe data to cookie (log mode). Adding unsafe cookie anyway and continuing.");
+            logger.warn(ESAPI.getSecurityFailureMarker(), "Attempt to add unsafe data to cookie (log mode). Adding unsafe cookie anyway and continuing.");
             getHttpServletResponse().addCookie(cookie);
             return;
         }
@@ -109,7 +109,7 @@
 
         // create a sanitized cookie header and continue
         if (mode.equals("sanitize")) {
-            logger.warning(Logger.SECURITY_FAILURE, "Attempt to add unsafe data to cookie (sanitize mode). Sanitizing cookie and continuing.");
+            logger.warn(ESAPI.getSecurityFailureMarker(), "Attempt to add unsafe data to cookie (sanitize mode). Sanitizing cookie and continuing.");
             String header = createCookieHeader(cookieName, cookieValue, maxAge, domain, path, secure);
             this.addHeader("Set-Cookie", header);
             return;
@@ -151,7 +151,7 @@
             String safeName = ESAPI.validator().getValidInput("safeSetDateHeader", name, "HTTPHeaderName", 20, false);
             getHttpServletResponse().addDateHeader(safeName, date);
         } catch (ValidationException e) {
-            logger.warning(Logger.SECURITY_FAILURE, "Attempt to set invalid date header name denied", e);
+            logger.warn(ESAPI.getSecurityFailureMarker(), "Attempt to set invalid date header name denied", e);
         }
     }
 
@@ -174,7 +174,7 @@
             String safeValue = ESAPI.validator().getValidInput("addHeader", strippedValue, "HTTPHeaderValue", ESAPI.securityConfiguration().getMaxHttpHeaderSize(), false);
             getHttpServletResponse().setHeader(safeName, safeValue);
         } catch (ValidationException e) {
-            logger.warning(Logger.SECURITY_FAILURE, "Attempt to add invalid header denied", e);
+            logger.warn(ESAPI.getSecurityFailureMarker(), "Attempt to add invalid header denied", e);
         }
     }
 
@@ -189,7 +189,7 @@
             String safeName = ESAPI.validator().getValidInput("safeSetDateHeader", name, "HTTPHeaderName", 20, false);
             getHttpServletResponse().addIntHeader(safeName, value);
         } catch (ValidationException e) {
-            logger.warning(Logger.SECURITY_FAILURE, "Attempt to set invalid int header name denied", e);
+            logger.warn(ESAPI.getSecurityFailureMarker(), "Attempt to set invalid int header name denied", e);
         }
     }
 
@@ -378,7 +378,7 @@
      */
     public void sendRedirect(String location) throws IOException {
         if (!ESAPI.validator().isValidRedirectLocation("Redirect", location, false)) {
-            logger.fatal(Logger.SECURITY_FAILURE, "Bad redirect location: " + location);
+            logger.error(ESAPI.getSecurityFailureMarker(), "Bad redirect location: " + location);
             throw new IOException("Redirect failed");
         }
         getHttpServletResponse().sendRedirect(location);
@@ -427,7 +427,7 @@
             String safeName = ESAPI.validator().getValidInput("safeSetDateHeader", name, "HTTPHeaderName", 20, false);
             getHttpServletResponse().setDateHeader(safeName, date);
         } catch (ValidationException e) {
-            logger.warning(Logger.SECURITY_FAILURE, "Attempt to set invalid date header name denied", e);
+            logger.warn(ESAPI.getSecurityFailureMarker(), "Attempt to set invalid date header name denied", e);
         }
     }
 
@@ -448,7 +448,7 @@
             String safeValue = ESAPI.validator().getValidInput("setHeader", strippedValue, "HTTPHeaderValue", ESAPI.securityConfiguration().getMaxHttpHeaderSize(), false);
             getHttpServletResponse().setHeader(safeName, safeValue);
         } catch (ValidationException e) {
-            logger.warning(Logger.SECURITY_FAILURE, "Attempt to set invalid header denied", e);
+            logger.warn(ESAPI.getSecurityFailureMarker(), "Attempt to set invalid header denied", e);
         }
     }
 
@@ -463,7 +463,7 @@
             String safeName = ESAPI.validator().getValidInput("safeSetDateHeader", name, "HTTPHeaderName", 20, false);
             getHttpServletResponse().setIntHeader(safeName, value);
         } catch (ValidationException e) {
-            logger.warning(Logger.SECURITY_FAILURE, "Attempt to set invalid int header name denied", e);
+            logger.warn(ESAPI.getSecurityFailureMarker(), "Attempt to set invalid int header name denied", e);
         }
     }
 
@@ -499,7 +499,7 @@
             // setStatus is deprecated so use sendError instead
             sendError(HttpServletResponse.SC_OK, sm);
         } catch (IOException e) {
-            logger.warning(Logger.SECURITY_FAILURE, "Attempt to set response status failed", e);
+            logger.warn(ESAPI.getSecurityFailureMarker(), "Attempt to set response status failed", e);
         }
     }
 
Index: src/main/java/org/owasp/esapi/reference/AbstractAuthenticator.java
===================================================================
--- src/main/java/org/owasp/esapi/reference/AbstractAuthenticator.java	(revision 1961)
+++ src/main/java/org/owasp/esapi/reference/AbstractAuthenticator.java	(working copy)
@@ -8,7 +8,7 @@
 
 import org.owasp.esapi.ESAPI;
 import org.owasp.esapi.HTTPUtilities;
-import org.owasp.esapi.Logger;
+import org.slf4j.Logger;
 import org.owasp.esapi.User;
 import org.owasp.esapi.errors.AccessControlException;
 import org.owasp.esapi.errors.AuthenticationCredentialsException;
@@ -120,7 +120,7 @@
 
             String[] data = ESAPI.encryptor().unseal(token).split("\\|");
             if (data.length != 2) {
-                logger.warning(Logger.SECURITY_FAILURE, "Found corrupt or expired remember token");
+                logger.warn(ESAPI.getSecurityFailureMarker(), "Found corrupt or expired remember token");
                 ESAPI.httpUtilities().killCookie(ESAPI.currentRequest(), ESAPI.currentResponse(), HTTPUtilities.REMEMBER_TOKEN_COOKIE_NAME);
                 return null;
             }
@@ -129,17 +129,17 @@
             String password = data[1];
             DefaultUser user = (DefaultUser) getUser(username);
             if (user == null) {
-                logger.warning(Logger.SECURITY_FAILURE, "Found valid remember token but no user matching " + username);
+                logger.warn(ESAPI.getSecurityFailureMarker(), "Found valid remember token but no user matching " + username);
                 return null;
             }
 
-            logger.info(Logger.SECURITY_SUCCESS, "Logging in user with remember token: " + user.getAccountName());
+            logger.info(ESAPI.getSecuritySuccessMarker(), "Logging in user with remember token: " + user.getAccountName());
             user.loginWithPassword(password);
             return user;
         } catch (AuthenticationException ae) {
-            logger.warning(Logger.SECURITY_FAILURE, "Login via remember me cookie failed", ae);
+            logger.warn(ESAPI.getSecurityFailureMarker(), "Login via remember me cookie failed", ae);
         } catch (EnterpriseSecurityException e) {
-            logger.warning(Logger.SECURITY_FAILURE, "Remember token was missing, corrupt, or expired");
+            logger.warn(ESAPI.getSecurityFailureMarker(), "Remember token was missing, corrupt, or expired");
         }
         ESAPI.httpUtilities().killCookie(ESAPI.currentRequest(), ESAPI.currentResponse(), HTTPUtilities.REMEMBER_TOKEN_COOKIE_NAME);
         return null;
@@ -160,7 +160,7 @@
         // if a logged-in user is requesting to login, log them out first
         User user = getCurrentUser();
         if (user != null && !user.isAnonymous()) {
-            logger.warning(Logger.SECURITY_SUCCESS, "User requested relogin. Performing logout then authentication");
+            logger.warn(ESAPI.getSecuritySuccessMarker(), "User requested relogin. Performing logout then authentication");
             user.logout();
         }
 
Index: src/main/java/org/owasp/esapi/reference/DefaultAccessController.java
===================================================================
--- src/main/java/org/owasp/esapi/reference/DefaultAccessController.java	(revision 1961)
+++ src/main/java/org/owasp/esapi/reference/DefaultAccessController.java	(working copy)
@@ -5,7 +5,7 @@
 import org.owasp.esapi.AccessControlRule;
 import org.owasp.esapi.AccessController;
 import org.owasp.esapi.ESAPI;
-import org.owasp.esapi.Logger;
+import org.slf4j.Logger;
 import org.owasp.esapi.errors.AccessControlException;
 import org.owasp.esapi.reference.accesscontrol.policyloader.ACRPolicyFileLoader;
 import org.owasp.esapi.reference.accesscontrol.policyloader.PolicyDTO;
@@ -44,7 +44,7 @@
 				throw new AccessControlException("Access Denied",
 						"AccessControlRule was not found for key: " + key); 
 			}
-			if(logger.isDebugEnabled()){ logger.debug(Logger.EVENT_SUCCESS, "Evaluating Authorization Rule \"" + key + "\" Using class: " + rule.getClass().getCanonicalName()); }
+			if(logger.isDebugEnabled()){ logger.debug(ESAPI.getEventsuccessMarker(), "Evaluating Authorization Rule \"" + key + "\" Using class: " + rule.getClass().getCanonicalName()); }
 			return rule.isAuthorized(runtimeParameter);
 		} catch(Exception e) {
 			try {
@@ -70,7 +70,7 @@
 				throw new AccessControlException("Access Denied", 
 						"AccessControlRule was not found for key: " + key); 
 			}
-			if(logger.isDebugEnabled()){ logger.debug(Logger.EVENT_SUCCESS, "Asserting Authorization Rule \"" + key + "\" Using class: " + rule.getClass().getCanonicalName()); }
+			if(logger.isDebugEnabled()){ logger.debug(ESAPI.getEventsuccessMarker(), "Asserting Authorization Rule \"" + key + "\" Using class: " + rule.getClass().getCanonicalName()); }
 			isAuthorized = rule.isAuthorized(runtimeParameter);
 		} catch(Exception e) {
 			//TODO figure out what which string goes where.		
Index: src/main/java/org/owasp/esapi/reference/DefaultEncoder.java
===================================================================
--- src/main/java/org/owasp/esapi/reference/DefaultEncoder.java	(revision 1961)
+++ src/main/java/org/owasp/esapi/reference/DefaultEncoder.java	(working copy)
@@ -25,7 +25,7 @@
 
 import org.owasp.esapi.ESAPI;
 import org.owasp.esapi.Encoder;
-import org.owasp.esapi.Logger;
+import org.slf4j.Logger;
 import org.owasp.esapi.codecs.Base64;
 import org.owasp.esapi.codecs.CSSCodec;
 import org.owasp.esapi.codecs.Codec;
@@ -105,7 +105,7 @@
 				if ( clazz.indexOf( '.' ) == -1 ) clazz = "org.owasp.esapi.codecs." + clazz;
 				codecs.add( Class.forName( clazz ).newInstance() );
 			} catch ( Exception e ) {
-				logger.warning( Logger.EVENT_FAILURE, "Codec " + clazz + " listed in ESAPI.properties not on classpath" );
+				logger.warn( ESAPI.getEventFailureMarker(), "Codec " + clazz + " listed in ESAPI.properties not on classpath" );
 			}
 		}
 	}
@@ -173,7 +173,7 @@
             if ( restrictMultiple || restrictMixed ) {
                 throw new IntrusionException( "Input validation failure", "Multiple ("+ foundCount +"x) and mixed encoding ("+ mixedCount +"x) detected in " + input );
             } else {
-                logger.warning( Logger.SECURITY_FAILURE, "Multiple ("+ foundCount +"x) and mixed encoding ("+ mixedCount +"x) detected in " + input );
+                logger.warn( ESAPI.getSecurityFailureMarker(), "Multiple ("+ foundCount +"x) and mixed encoding ("+ mixedCount +"x) detected in " + input );
             }
         }
         else if ( foundCount >= 2 ) {
@@ -180,7 +180,7 @@
             if ( restrictMultiple ) {
                 throw new IntrusionException( "Input validation failure", "Multiple ("+ foundCount +"x) encoding detected in " + input );
             } else {
-                logger.warning( Logger.SECURITY_FAILURE, "Multiple ("+ foundCount +"x) encoding detected in " + input );
+                logger.warn( ESAPI.getSecurityFailureMarker(), "Multiple ("+ foundCount +"x) encoding detected in " + input );
             }
         }
         else if ( mixedCount > 1 ) {
@@ -187,7 +187,7 @@
             if ( restrictMixed ) {
                 throw new IntrusionException( "Input validation failure", "Mixed encoding ("+ mixedCount +"x) detected in " + input );
             } else {
-                logger.warning( Logger.SECURITY_FAILURE, "Mixed encoding ("+ mixedCount +"x) detected in " + input );
+                logger.warn( ESAPI.getSecurityFailureMarker(), "Mixed encoding ("+ mixedCount +"x) detected in " + input );
             }
         }
         return working;
Index: src/main/java/org/owasp/esapi/reference/DefaultExecutor.java
===================================================================
--- src/main/java/org/owasp/esapi/reference/DefaultExecutor.java	(revision 1961)
+++ src/main/java/org/owasp/esapi/reference/DefaultExecutor.java	(working copy)
@@ -26,7 +26,7 @@
 import org.owasp.esapi.ESAPI;
 import org.owasp.esapi.ExecuteResult;
 import org.owasp.esapi.Executor;
-import org.owasp.esapi.Logger;
+import org.slf4j.Logger;
 import org.owasp.esapi.codecs.Codec;
 import org.owasp.esapi.codecs.UnixCodec;
 import org.owasp.esapi.codecs.WindowsCodec;
@@ -67,10 +67,10 @@
      */
     private DefaultExecutor() {
 		if ( System.getProperty("os.name").indexOf("Windows") != -1 ) {
-			logger.warning( Logger.SECURITY_SUCCESS, "Using WindowsCodec for Executor. If this is not running on Windows this could allow injection" );
+			logger.warn( ESAPI.getSecuritySuccessMarker(), "Using WindowsCodec for Executor. If this is not running on Windows this could allow injection" );
 			codec = new WindowsCodec();
 		} else {
-			logger.warning( Logger.SECURITY_SUCCESS, "Using UnixCodec for Executor. If this is not running on Unix this could allow injection" );
+			logger.warn( ESAPI.getSecuritySuccessMarker(), "Using UnixCodec for Executor. If this is not running on Unix this could allow injection" );
 			codec = new UnixCodec();
 		}
     }
@@ -143,9 +143,9 @@
             pb.redirectErrorStream(redirectErrorStream);
 
             if ( logParams ) {
-            	logger.warning(Logger.SECURITY_SUCCESS, "Initiating executable: " + executable + " " + params + " in " + workdir);
+            	logger.warn(ESAPI.getSecuritySuccessMarker(), "Initiating executable: " + executable + " " + params + " in " + workdir);
             } else {
-            	logger.warning(Logger.SECURITY_SUCCESS, "Initiating executable: " + executable + " [sensitive parameters obscured] in " + workdir);
+            	logger.warn(ESAPI.getSecuritySuccessMarker(), "Initiating executable: " + executable + " [sensitive parameters obscured] in " + workdir);
             }
 
             final StringBuilder outputBuffer = new StringBuilder();
@@ -181,13 +181,13 @@
             	if (logErrors.length() > MAX_LEN) {
             		logErrors = logErrors.substring(0, MAX_LEN) + "(truncated at "+MAX_LEN+" characters)";
             	}
-            	logger.warning( Logger.SECURITY_SUCCESS, "Error during system command: " + logErrors );
+            	logger.warn( ESAPI.getSecuritySuccessMarker(), "Error during system command: " + logErrors );
             }
             if ( exitValue != 0 ) {
-            	logger.warning( Logger.EVENT_FAILURE, "System command exited with non-zero status: " + exitValue );
+            	logger.warn( ESAPI.getEventFailureMarker(), "System command exited with non-zero status: " + exitValue );
             }
 
-            logger.warning(Logger.SECURITY_SUCCESS, "System command complete");
+            logger.warn(ESAPI.getSecuritySuccessMarker(), "System command complete");
             return new ExecuteResult(exitValue, output, errors);
         } catch (IOException e) {
             throw new ExecutorException("Execution failure", "Exception thrown during execution of system command: " + e.getMessage(), e);
Index: src/main/java/org/owasp/esapi/reference/DefaultHTTPUtilities.java
===================================================================
--- src/main/java/org/owasp/esapi/reference/DefaultHTTPUtilities.java	(revision 1961)
+++ src/main/java/org/owasp/esapi/reference/DefaultHTTPUtilities.java	(working copy)
@@ -24,6 +24,7 @@
 import org.owasp.esapi.crypto.CipherText;
 import org.owasp.esapi.crypto.PlainText;
 import org.owasp.esapi.errors.*;
+import org.slf4j.Logger;
 
 import javax.servlet.RequestDispatcher;
 import javax.servlet.ServletException;
@@ -31,6 +32,7 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import javax.servlet.http.HttpSession;
+
 import java.io.File;
 import java.io.IOException;
 import java.util.*;
@@ -179,7 +181,7 @@
         	}
             return;
         }
-        logger.warning(Logger.SECURITY_FAILURE, "Attempt to add unsafe data to cookie (skip mode). Skipping cookie and continuing.");
+        logger.warn(ESAPI.getSecurityFailureMarker(), "Attempt to add unsafe data to cookie (skip mode). Skipping cookie and continuing.");
     }
 
 
@@ -216,7 +218,7 @@
             String safeValue = ESAPI.validator().getValidInput("addHeader", strippedValue, "HTTPHeaderValue", 500, false);
             response.addHeader(safeName, safeValue);
         } catch (ValidationException e) {
-            logger.warning(Logger.SECURITY_FAILURE, "Attempt to add invalid header denied", e);
+            logger.warn(ESAPI.getSecurityFailureMarker(), "Attempt to add invalid header denied", e);
         }
     }
 
@@ -408,7 +410,7 @@
              sb.append(name).append("=").append(value);
 	    		if ( i.hasNext() ) sb.append( "&" );
     		} catch( EncodingException e ) {
-    			logger.error(Logger.SECURITY_FAILURE, "Problem encrypting state in cookie - skipping entry", e );
+    			logger.error(ESAPI.getSecurityFailureMarker(), "Problem encrypting state in cookie - skipping entry", e );
     		}
     	}
 
@@ -415,7 +417,7 @@
 		String encrypted = encryptString(sb.toString());
 
 		if ( encrypted.length() > (MAX_COOKIE_LEN ) ) {
-			logger.error(Logger.SECURITY_FAILURE, "Problem encrypting state in cookie - skipping entry");
+			logger.error(ESAPI.getSecurityFailureMarker(), "Problem encrypting state in cookie - skipping entry");
 			throw new EncryptionException("Encryption failure", "Encrypted cookie state of " + encrypted.length() + " longer than allowed " + MAX_COOKIE_LEN );
 		}
 
@@ -562,7 +564,7 @@
 						throw new ValidationUploadException("Upload only simple filenames with the following extensions " + allowedExtensions, "Upload failed isValidFileName check");
 					}
 
-					logger.info(Logger.SECURITY_SUCCESS, "File upload requested: " + filename);
+					logger.info(ESAPI.getSecuritySuccessMarker(), "File upload requested: " + filename);
 					File f = new File(finalDir, filename);
                if (f.exists())
                {
@@ -579,7 +581,7 @@
                newFiles.add(f);
 					// delete temporary file
 					item.delete();
-					logger.fatal(Logger.SECURITY_SUCCESS, "File successfully uploaded: " + f);
+					logger.error(ESAPI.getSecuritySuccessMarker(), "File successfully uploaded: " + f);
                if (session != null)
                {
 					    session.setAttribute("progress", Long.toString(0));
@@ -757,7 +759,7 @@
 		            }
 		    }
 		    String msg = request.getMethod() + " " + request.getRequestURL() + (params.length() > 0 ? "?" + params : "");
-		    logger.info(Logger.SECURITY_SUCCESS, msg);
+		    logger.info(ESAPI.getSecuritySuccessMarker(), msg);
 		}
 
 	private Map<String,String> queryToMap(String query) {
@@ -810,7 +812,7 @@
      */
     public void sendRedirect(HttpServletResponse response, String location) throws AccessControlException, IOException {
         if (!ESAPI.validator().isValidRedirectLocation("Redirect", location, false)) {
-            logger.fatal(Logger.SECURITY_FAILURE, "Bad redirect location: " + location);
+            logger.error(ESAPI.getSecurityFailureMarker(), "Bad redirect location: " + location);
             throw new IOException("Redirect failed");
         }
         response.sendRedirect(location);
@@ -857,7 +859,7 @@
             String safeValue = ESAPI.validator().getValidInput("setHeader", strippedValue, "HTTPHeaderValue", 500, false);
             response.setHeader(safeName, safeValue);
         } catch (ValidationException e) {
-            logger.warning(Logger.SECURITY_FAILURE, "Attempt to set invalid header denied", e);
+            logger.warn(ESAPI.getSecurityFailureMarker(), "Attempt to set invalid header denied", e);
         }
     }
 
@@ -920,10 +922,10 @@
 			cookie.setDomain( domain );
 			cookie.setPath( path );
 			response.addCookie( cookie );
-			logger.info(Logger.SECURITY_SUCCESS, "Enabled remember me token for " + user.getAccountName() );
+			logger.info(ESAPI.getSecuritySuccessMarker(), "Enabled remember me token for " + user.getAccountName() );
 			return cryptToken;
 		} catch( IntegrityException e ) {
-			logger.warning(Logger.SECURITY_FAILURE, "Attempt to set remember me token failed for " + user.getAccountName(), e );
+			logger.warn(ESAPI.getSecurityFailureMarker(), "Attempt to set remember me token failed for " + user.getAccountName(), e );
 			return null;
 		}
 	}
Index: src/main/java/org/owasp/esapi/reference/DefaultIntrusionDetector.java
===================================================================
--- src/main/java/org/owasp/esapi/reference/DefaultIntrusionDetector.java	(revision 1961)
+++ src/main/java/org/owasp/esapi/reference/DefaultIntrusionDetector.java	(working copy)
@@ -21,7 +21,7 @@
 import java.util.Stack;
 
 import org.owasp.esapi.ESAPI;
-import org.owasp.esapi.Logger;
+import org.slf4j.Logger;
 import org.owasp.esapi.User;
 import org.owasp.esapi.SecurityConfiguration.Threshold;
 import org.owasp.esapi.errors.EnterpriseSecurityException;
@@ -62,9 +62,9 @@
 		if (ESAPI.securityConfiguration().getDisableIntrusionDetection()) return;
 		
         if ( e instanceof EnterpriseSecurityException ) {
-            logger.warning( Logger.SECURITY_FAILURE, ((EnterpriseSecurityException)e).getLogMessage(), e );
+            logger.warn( ESAPI.getSecurityFailureMarker(), ((EnterpriseSecurityException)e).getLogMessage(), e );
         } else {
-            logger.warning( Logger.SECURITY_FAILURE, e.getMessage(), e );
+            logger.warn( ESAPI.getSecurityFailureMarker(), e.getMessage(), e );
         }
 
         // add the exception to the current user, which may trigger a detector 
@@ -95,7 +95,7 @@
     public void addEvent(String eventName, String logMessage) throws IntrusionException {
     	if (ESAPI.securityConfiguration().getDisableIntrusionDetection()) return;
     	
-        logger.warning( Logger.SECURITY_FAILURE, "Security event " + eventName + " received : " + logMessage );
+        logger.warn( ESAPI.getSecurityFailureMarker(), "Security event " + eventName + " received : " + logMessage );
 
         // add the event to the current user, which may trigger a detector 
         User user = ESAPI.authenticator().getCurrentUser();
@@ -125,7 +125,7 @@
     	if (ESAPI.securityConfiguration().getDisableIntrusionDetection()) return;
     	
         if ( action.equals( "log" ) ) {
-            logger.fatal( Logger.SECURITY_FAILURE, "INTRUSION - " + message );
+            logger.error( ESAPI.getSecurityFailureMarker(), "INTRUSION - " + message );
         }
         User user = ESAPI.authenticator().getCurrentUser();
         if (user == User.ANONYMOUS)
Index: src/main/java/org/owasp/esapi/reference/DefaultRandomizer.java
===================================================================
--- src/main/java/org/owasp/esapi/reference/DefaultRandomizer.java	(revision 1961)
+++ src/main/java/org/owasp/esapi/reference/DefaultRandomizer.java	(working copy)
@@ -21,7 +21,7 @@
 
 import org.owasp.esapi.ESAPI;
 import org.owasp.esapi.EncoderConstants;
-import org.owasp.esapi.Logger;
+import org.slf4j.Logger;
 import org.owasp.esapi.Randomizer;
 import org.owasp.esapi.errors.EncryptionException;
 
@@ -111,7 +111,7 @@
 	 */
     public String getRandomFilename(String extension) {
         String fn = getRandomString(12, EncoderConstants.CHAR_ALPHANUMERICS) + "." + extension;
-        logger.debug(Logger.SECURITY_SUCCESS, "Generated new random filename: " + fn );
+        logger.debug(ESAPI.getSecuritySuccessMarker(), "Generated new random filename: " + fn );
         return fn;
     }
     
Index: src/main/java/org/owasp/esapi/reference/DefaultSecurityConfiguration.java
===================================================================
--- src/main/java/org/owasp/esapi/reference/DefaultSecurityConfiguration.java	(revision 1961)
+++ src/main/java/org/owasp/esapi/reference/DefaultSecurityConfiguration.java	(working copy)
@@ -33,8 +33,9 @@
 import java.util.regex.PatternSyntaxException;
 
 import org.apache.commons.lang.text.StrTokenizer;
+import org.apache.commons.logging.Log;
 import org.owasp.esapi.ESAPI;
-import org.owasp.esapi.Logger;
+import org.slf4j.Logger;
 import org.owasp.esapi.SecurityConfiguration;
 import org.owasp.esapi.errors.ConfigurationException;
 
@@ -958,31 +959,49 @@
 
     /**
 	 * {@inheritDoc}
+	 * 
+	 * Interface Log
+
+All Known Implementing Classes:
+NoOpLog, SimpleLog, SLF4JLocationAwareLog, SLF4JLog
+
+public interface Log
+A simple logging interface abstracting logging APIs. In order to be instantiated successfully by LogFactory, classes that implement this interface must have a constructor that takes a single String parameter representing the "name" of this Log.
+
+The six logging levels used by Log are (in order):
+
+1-trace (the least serious)
+2-debug
+3-info
+4-warn
+5-error
+6-fatal (the most serious)
+The mapping of these log levels to the concepts used by the underlying logging system is implementation dependent. The implementation should ensure, though, that this ordering behaves as expected.
 	 */
     public int getLogLevel() {
         String level = getESAPIProperty(LOG_LEVEL, "WARNING" );
 
         if (level.equalsIgnoreCase("OFF"))
-            return Logger.OFF;
+            return 0;
         if (level.equalsIgnoreCase("FATAL"))
-            return Logger.FATAL;
+            return 6;
         if (level.equalsIgnoreCase("ERROR"))
-            return Logger.ERROR ;
+            return 5 ;
         if (level.equalsIgnoreCase("WARNING"))
-            return Logger.WARNING;
+            return 4;
         if (level.equalsIgnoreCase("INFO"))
-            return Logger.INFO;
+            return 3;
         if (level.equalsIgnoreCase("DEBUG"))
-            return Logger.DEBUG;
+            return 2;
         if (level.equalsIgnoreCase("TRACE"))
-            return Logger.TRACE;
+            return 1;
         if (level.equalsIgnoreCase("ALL"))
-            return Logger.ALL;
+            return 5;
 
 		// This error is NOT logged the normal way because the logger constructor calls getLogLevel() and if this error occurred it would cause
 		// an infinite loop.
         logSpecial("The LOG-LEVEL property in the ESAPI properties file has the unrecognized value: " + level + ". Using default: WARNING", null);
-        return Logger.WARNING;  // Note: The default logging level is WARNING.
+        return 4;  // Note: The default logging level is WARNING.
     }
 
     /**
Index: src/main/java/org/owasp/esapi/reference/DefaultUser.java
===================================================================
--- src/main/java/org/owasp/esapi/reference/DefaultUser.java	(revision 1961)
+++ src/main/java/org/owasp/esapi/reference/DefaultUser.java	(working copy)
@@ -18,7 +18,7 @@
 import org.owasp.esapi.ESAPI;
 import org.owasp.esapi.EncoderConstants;
 import org.owasp.esapi.HTTPUtilities;
-import org.owasp.esapi.Logger;
+import org.slf4j.Logger;
 import org.owasp.esapi.User;
 import org.owasp.esapi.errors.*;
 
@@ -132,7 +132,7 @@
 		String roleName = role.toLowerCase();
 		if ( ESAPI.validator().isValidInput("addRole", roleName, "RoleName", MAX_ROLE_LENGTH, false) ) {
 			roles.add(roleName);
-			logger.info(Logger.SECURITY_SUCCESS, "Role " + roleName + " added to " + getAccountName() );
+			logger.info(ESAPI.getSecuritySuccessMarker(), "Role " + roleName + " added to " + getAccountName() );
 		} else {
 			throw new AuthenticationAccountsException( "Add role failed", "Attempt to add invalid role " + roleName + " to " + getAccountName() );
 		}
@@ -160,7 +160,7 @@
 	 */
 	public void disable() {
 		enabled = false;
-		logger.info( Logger.SECURITY_SUCCESS, "Account disabled: " + getAccountName() );
+		logger.info( ESAPI.getSecuritySuccessMarker(), "Account disabled: " + getAccountName() );
 	}
 	
 	/**
@@ -168,7 +168,7 @@
 	 */
 	public void enable() {
 		this.enabled = true;
-		logger.info( Logger.SECURITY_SUCCESS, "Account enabled: " + getAccountName() );
+		logger.info( ESAPI.getSecuritySuccessMarker(), "Account enabled: " + getAccountName() );
 	}
 
 	/**
@@ -378,7 +378,7 @@
 	 */
 	public void lock() {
 		this.locked = true;
-		logger.info(Logger.SECURITY_SUCCESS, "Account locked: " + getAccountName() );
+		logger.info(ESAPI.getSecuritySuccessMarker(), "Account locked: " + getAccountName() );
 	}
 
 	/**
@@ -420,7 +420,7 @@
 			ESAPI.authenticator().setCurrentUser(this);
 			setLastLoginTime(new Date());
             setLastHostAddress( ESAPI.httpUtilities().getCurrentRequest().getRemoteAddr() );
-			logger.trace(Logger.SECURITY_SUCCESS, "User logged in: " + accountName );
+			logger.trace(ESAPI.getSecuritySuccessMarker(), "User logged in: " + accountName );
 		} else {
 			loggedIn = false;
 			setLastFailedLoginTime(new Date());
@@ -446,7 +446,7 @@
 		}
 		ESAPI.httpUtilities().killCookie(ESAPI.currentRequest(), ESAPI.currentResponse(), ESAPI.securityConfiguration().getHttpSessionIdName());
 		loggedIn = false;
-		logger.info(Logger.SECURITY_SUCCESS, "Logout successful" );
+		logger.info(ESAPI.getSecuritySuccessMarker(), "Logout successful" );
 		ESAPI.authenticator().setCurrentUser(User.ANONYMOUS);
 	}
 
@@ -455,7 +455,7 @@
 	 */
 	public void removeRole(String role) {
 		roles.remove(role.toLowerCase());
-		logger.trace(Logger.SECURITY_SUCCESS, "Role " + role + " removed from " + getAccountName() );
+		logger.trace(ESAPI.getSecuritySuccessMarker(), "Role " + role + " removed from " + getAccountName() );
 	}
 
 	/**
@@ -495,7 +495,7 @@
 			if ( old.equals( "" ) ) {
 				old = "[nothing]";
 			}
-			logger.info(Logger.SECURITY_SUCCESS, "Account name changed from " + old + " to " + getAccountName() );
+			logger.info(ESAPI.getSecuritySuccessMarker(), "Account name changed from " + old + " to " + getAccountName() );
 		}
 	}
 
@@ -504,7 +504,7 @@
 	 */
 	public void setExpirationTime(Date expirationTime) {
 		this.expirationTime = new Date( expirationTime.getTime() );
-		logger.info(Logger.SECURITY_SUCCESS, "Account expiration time set to " + expirationTime + " for " + getAccountName() );
+		logger.info(ESAPI.getSecuritySuccessMarker(), "Account expiration time set to " + expirationTime + " for " + getAccountName() );
 	}
 
 	/**
@@ -512,7 +512,7 @@
 	 */
 	public void setLastFailedLoginTime(Date lastFailedLoginTime) {
 		this.lastFailedLoginTime = lastFailedLoginTime;
-		logger.info(Logger.SECURITY_SUCCESS, "Set last failed login time to " + lastFailedLoginTime + " for " + getAccountName() );
+		logger.info(ESAPI.getSecuritySuccessMarker(), "Set last failed login time to " + lastFailedLoginTime + " for " + getAccountName() );
 	}
 	
 	/**
@@ -532,7 +532,7 @@
 	 */
 	public void setLastLoginTime(Date lastLoginTime) {
 		this.lastLoginTime = lastLoginTime;
-		logger.info(Logger.SECURITY_SUCCESS, "Set last successful login time to " + lastLoginTime + " for " + getAccountName() );
+		logger.info(ESAPI.getSecuritySuccessMarker(), "Set last successful login time to " + lastLoginTime + " for " + getAccountName() );
 	}
 
 	/**
@@ -540,7 +540,7 @@
 	 */
 	public void setLastPasswordChangeTime(Date lastPasswordChangeTime) {
 		this.lastPasswordChangeTime = lastPasswordChangeTime;
-		logger.info(Logger.SECURITY_SUCCESS, "Set last password change time to " + lastPasswordChangeTime + " for " + getAccountName() );
+		logger.info(ESAPI.getSecuritySuccessMarker(), "Set last password change time to " + lastPasswordChangeTime + " for " + getAccountName() );
 	}
 
 	/**
@@ -549,7 +549,7 @@
 	public void setRoles(Set<String> roles) throws AuthenticationException {
 		this.roles = new HashSet<String>();
 		addRoles(roles);
-		logger.info(Logger.SECURITY_SUCCESS, "Adding roles " + roles + " to " + getAccountName() );
+		logger.info(ESAPI.getSecuritySuccessMarker(), "Adding roles " + roles + " to " + getAccountName() );
 	}
 
 	/**
@@ -557,7 +557,7 @@
 	 */
 	public void setScreenName(String screenName) {
 		this.screenName = screenName;
-		logger.info(Logger.SECURITY_SUCCESS, "ScreenName changed to " + screenName + " for " + getAccountName() );
+		logger.info(ESAPI.getSecuritySuccessMarker(), "ScreenName changed to " + screenName + " for " + getAccountName() );
 	}
 
 	/**
@@ -575,7 +575,7 @@
 	public void unlock() {
 		this.locked = false;
 		this.failedLoginCount = 0;
-		logger.info( Logger.SECURITY_SUCCESS, "Account unlocked: " + getAccountName() );
+		logger.info( ESAPI.getSecuritySuccessMarker(), "Account unlocked: " + getAccountName() );
 	}
 	
 	/**
Index: src/main/java/org/owasp/esapi/reference/FileBasedAuthenticator.java
===================================================================
--- src/main/java/org/owasp/esapi/reference/FileBasedAuthenticator.java	(revision 1961)
+++ src/main/java/org/owasp/esapi/reference/FileBasedAuthenticator.java	(working copy)
@@ -17,6 +17,7 @@
 
 import org.owasp.esapi.*;
 import org.owasp.esapi.errors.*;
+import org.slf4j.Logger;
 
 import java.io.*;
 import java.util.*;
@@ -143,7 +144,7 @@
         if (hashes.size() > ESAPI.securityConfiguration().getMaxOldPasswordHashes()) {
             hashes.remove(hashes.size() - 1);
         }
-        logger.info(Logger.SECURITY_SUCCESS, "New hashed password stored for " + user.getAccountName());
+        logger.info(ESAPI.getSecuritySuccessMarker(), "New hashed password stored for " + user.getAccountName());
     }
 
     /**
@@ -260,7 +261,7 @@
             throw new AuthenticationException("Internal error", "Error hashing password for " + accountName, ee);
         }
         userMap.put(user.getAccountId(), user);
-        logger.info(Logger.SECURITY_SUCCESS, "New user created: " + accountName);
+        logger.info(ESAPI.getSecuritySuccessMarker(), "New user created: " + accountName);
         saveUsers();
         return user;
     }
@@ -315,7 +316,7 @@
                 throw new AuthenticationCredentialsException("Password change failed", "Password change matches a recent password for user: " + accountName);
             }
             setHashedPassword(user, newHash);
-            logger.info(Logger.SECURITY_SUCCESS, "Password changed for user: " + accountName);
+            logger.info(ESAPI.getSecuritySuccessMarker(), "Password changed for user: " + accountName);
             // jtm - 11/2/2010 - added to resolve http://code.google.com/p/owasp-esapi-java/issues/detail?id=13
             saveUsers();
         } catch (EncryptionException ee) {
@@ -334,13 +335,13 @@
             if (hash.equals(currentHash)) {
                 user.setLastLoginTime(new Date());
                 ((DefaultUser) user).setFailedLoginCount(0);
-                logger.info(Logger.SECURITY_SUCCESS, "Password verified for " + accountName);
+                logger.info(ESAPI.getSecuritySuccessMarker(), "Password verified for " + accountName);
                 return true;
             }
         } catch (EncryptionException e) {
-            logger.fatal(Logger.SECURITY_FAILURE, "Encryption error verifying password for " + accountName);
+            logger.error(ESAPI.getSecurityFailureMarker(), "Encryption error verifying password for " + accountName);
         }
-        logger.fatal(Logger.SECURITY_FAILURE, "Password verification failed for " + accountName);
+        logger.error(ESAPI.getSecurityFailureMarker(), "Password verification failed for " + accountName);
         return false;
     }
 
@@ -350,7 +351,7 @@
     public String generateStrongPassword(User user, String oldPassword) {
         String newPassword = generateStrongPassword(oldPassword);
         if (newPassword != null) {
-            logger.info(Logger.SECURITY_SUCCESS, "Generated strong password for " + user.getAccountName());
+            logger.info(ESAPI.getSecuritySuccessMarker(), "Generated strong password for " + user.getAccountName());
         }
         return newPassword;
     }
@@ -417,9 +418,9 @@
             userDB = new File(System.getProperty("user.home") + "/.esapi", "users.txt");
             try {
                 if (!userDB.createNewFile()) throw new IOException("Unable to create the user file");
-                logger.warning(Logger.SECURITY_SUCCESS, "Created " + userDB.getAbsolutePath());
+                logger.warn(ESAPI.getSecuritySuccessMarker(), "Created " + userDB.getAbsolutePath());
             } catch (IOException e) {
-                logger.fatal(Logger.SECURITY_FAILURE, "Could not create " + userDB.getAbsolutePath(), e);
+                logger.error(ESAPI.getSecurityFailureMarker(), "Could not create " + userDB.getAbsolutePath(), e);
             }
         }
 
@@ -442,7 +443,7 @@
      */
     protected void loadUsersImmediately() {
         synchronized (this) {
-            logger.trace(Logger.SECURITY_SUCCESS, "Loading users from " + userDB.getAbsolutePath(), null);
+            logger.trace(ESAPI.getSecuritySuccessMarker(), "Loading users from " + userDB.getAbsolutePath());
 
             BufferedReader reader = null;
             try {
@@ -453,7 +454,7 @@
                     if (line.length() > 0 && line.charAt(0) != '#') {
                         DefaultUser user = createUser(line);
                         if (map.containsKey(new Long(user.getAccountId()))) {
-                            logger.fatal(Logger.SECURITY_FAILURE, "Problem in user file. Skipping duplicate user: " + user, null);
+                            logger.error(ESAPI.getSecurityFailureMarker(), "Problem in user file. Skipping duplicate user: " + user);
                         }
                         map.put(user.getAccountId(), user);
                     }
@@ -460,9 +461,9 @@
                 }
                 userMap = map;
                 this.lastModified = System.currentTimeMillis();
-                logger.trace(Logger.SECURITY_SUCCESS, "User file reloaded: " + map.size(), null);
+                logger.trace(ESAPI.getSecuritySuccessMarker(), "User file reloaded: " + map.size());
             } catch (Exception e) {
-                logger.fatal(Logger.SECURITY_FAILURE, "Failure loading user file: " + userDB.getAbsolutePath(), e);
+                logger.error(ESAPI.getSecurityFailureMarker(), "Failure loading user file: " + userDB.getAbsolutePath(), e);
             } finally {
                 try {
                     if (reader != null) {
@@ -469,7 +470,7 @@
                         reader.close();
                     }
                 } catch (IOException e) {
-                    logger.fatal(Logger.SECURITY_FAILURE, "Failure closing user file: " + userDB.getAbsolutePath(), e);
+                    logger.error(ESAPI.getSecurityFailureMarker(), "Failure closing user file: " + userDB.getAbsolutePath(), e);
                 }
             }
         }
@@ -536,7 +537,7 @@
             throw new AuthenticationAccountsException("Remove user failed", "Can't remove invalid accountName " + accountName);
         }
         userMap.remove(user.getAccountId());
-        logger.info(Logger.SECURITY_SUCCESS, "Removing user " + user.getAccountName());
+        logger.info(ESAPI.getSecuritySuccessMarker(), "Removing user " + user.getAccountName());
         passwordMap.remove(user);
         saveUsers();
     }
@@ -556,9 +557,9 @@
             writer.println();
             saveUsers(writer);
             writer.flush();
-            logger.info(Logger.SECURITY_SUCCESS, "User file written to disk");
+            logger.info(ESAPI.getSecuritySuccessMarker(), "User file written to disk");
         } catch (IOException e) {
-            logger.fatal(Logger.SECURITY_FAILURE, "Problem saving user file " + userDB.getAbsolutePath(), e);
+            logger.error(ESAPI.getSecurityFailureMarker(), "Problem saving user file " + userDB.getAbsolutePath(), e);
             throw new AuthenticationException("Internal Error", "Problem saving user file " + userDB.getAbsolutePath(), e);
         } finally {
             if (writer != null) {
Index: src/main/java/org/owasp/esapi/reference/JavaLogFactory.java
===================================================================
--- src/main/java/org/owasp/esapi/reference/JavaLogFactory.java	(revision 1961)
+++ src/main/java/org/owasp/esapi/reference/JavaLogFactory.java	(working copy)
@@ -1,409 +0,0 @@
-package org.owasp.esapi.reference;
-
-import java.io.Serializable;
-import java.util.HashMap;
-import java.util.logging.Level;
-
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpSession;
-
-import org.owasp.esapi.ESAPI;
-import org.owasp.esapi.LogFactory;
-import org.owasp.esapi.Logger;
-import org.owasp.esapi.User;
-
-/**
- * Reference implementation of the LogFactory and Logger interfaces. This implementation uses the Java logging package, and marks each
- * log message with the currently logged in user and the word "SECURITY" for security related events. See the 
- * <a href="JavaLogFactory.JavaLogger.html">JavaLogFactory.JavaLogger</a> Javadocs for the details on the JavaLogger reference implementation.
- * 
- * @author Mike Fauzy (mike.fauzy@aspectsecurity.com) <a href="http://www.aspectsecurity.com">Aspect Security</a>
- * @author Jeff Williams (jeff.williams .at. aspectsecurity.com) <a href="http://www.aspectsecurity.com">Aspect Security</a>
- * @since June 1, 2007
- * @see org.owasp.esapi.LogFactory
- * @see org.owasp.esapi.reference.JavaLogFactory.JavaLogger
- */
-public class JavaLogFactory implements LogFactory {
-	private static volatile LogFactory singletonInstance;
-
-    public static LogFactory getInstance() {
-        if ( singletonInstance == null ) {
-            synchronized ( JavaLogFactory.class ) {
-                if ( singletonInstance == null ) {
-                    singletonInstance = new JavaLogFactory();
-                }
-            }
-        }
-        return singletonInstance;
-    }
-
-	private HashMap<Serializable, Logger> loggersMap = new HashMap<Serializable, Logger>();
-	
-	/**
-	* Null argument constructor for this implementation of the LogFactory interface
-	* needed for dynamic configuration.
-	*/
-	public JavaLogFactory() {}
-	
-	/**
-	* {@inheritDoc}
-	*/
-	public Logger getLogger(Class clazz) {
-    	
-    	// If a logger for this class already exists, we return the same one, otherwise we create a new one.
-    	Logger classLogger = (Logger) loggersMap.get(clazz);
-    	
-    	if (classLogger == null) {
-    		classLogger = new JavaLogger(clazz.getName());
-    		loggersMap.put(clazz, classLogger);
-    	}
-		return classLogger;
-    }
-
-    /**
-	* {@inheritDoc}
-	*/
-    public Logger getLogger(String moduleName) {
-    	
-    	// If a logger for this module already exists, we return the same one, otherwise we create a new one.
-    	Logger moduleLogger = (Logger) loggersMap.get(moduleName);
-    	
-    	if (moduleLogger == null) {
-    		moduleLogger = new JavaLogger(moduleName);
-    		loggersMap.put(moduleName, moduleLogger);    		
-    	}
-		return moduleLogger;
-    }
-
-
-    /**
-     *  A custom logging level defined between Level.SEVERE and Level.WARNING in logger.
-     */
-    public static class JavaLoggerLevel extends Level {
-
-        protected static final long serialVersionUID = 1L;
-
-        /**
-    	 * Defines a custom error level below SEVERE but above WARNING since this level isn't defined directly
-    	 * by java.util.Logger already.
-    	 */
-    	public static final Level ERROR_LEVEL = new JavaLoggerLevel( "ERROR", Level.SEVERE.intValue() - 1);
-    	
-    	/**
-    	 * Constructs an instance of a JavaLoggerLevel which essentially provides a mapping between the name of
-    	 * the defined level and its numeric value.
-    	 * 
-    	 * @param name The name of the JavaLoggerLevel
-    	 * @param value The associated numeric value
-    	 */
-		protected JavaLoggerLevel(String name, int value) {
-			super(name, value);
-		}
-    }
-        
-    /**
-     * Reference implementation of the Logger interface.
-     * 
-     * It implements most of the recommendations defined in the Logger interface description. It does not
-     * filter out any sensitive data specific to the current application or organization, such as credit 
-     * cards, social security numbers, etc.  
-     * 
-     * @author Jeff Williams (jeff.williams .at. aspectsecurity.com) <a href="http://www.aspectsecurity.com">Aspect Security</a>
-     * @since June 1, 2007
-     * @see org.owasp.esapi.LogFactory
-     */
-    private static class JavaLogger implements org.owasp.esapi.Logger {
-
-    	/** The jlogger object used by this class to log everything. */
-        private java.util.logging.Logger jlogger = null;
-
-        /** The module name using this log. */
-        private String moduleName = null;
-
-        /** The application name defined in ESAPI.properties */
-    	private String applicationName=ESAPI.securityConfiguration().getApplicationName();
-
-        /** Log the application name? */
-    	private static boolean logAppName = ESAPI.securityConfiguration().getLogApplicationName();
-
-    	/** Log the server ip? */
-    	private static boolean logServerIP = ESAPI.securityConfiguration().getLogServerIP();
-    	
-        /**
-         * Public constructor should only ever be called via the appropriate LogFactory
-         * 
-         * @param moduleName the module name
-         */
-        private JavaLogger(String moduleName) {
-            this.moduleName = moduleName;
-            this.jlogger = java.util.logging.Logger.getLogger(applicationName + ":" + moduleName);
-        }
-
-        /**
-         * {@inheritDoc}
-         * Note: In this implementation, this change is not persistent,
-         * meaning that if the application is restarted, the log level will revert to the level defined in the 
-         * ESAPI SecurityConfiguration properties file.
-         */
-        public void setLevel(int level)
-        {
-        	try {
-        		jlogger.setLevel(convertESAPILeveltoLoggerLevel( level ));
-        	}
-        	catch (IllegalArgumentException e) {
-       			this.error(Logger.SECURITY_FAILURE, "", e);    		
-        	}
-         }
-        
-        /**
-         * {@inheritDoc}
-         * @see org.owasp.esapi.reference.Log4JLogger#getESAPILevel()
-         */
-        public int getESAPILevel() {
-        	return jlogger.getLevel().intValue();
-        }
-        
-        /**
-         * Converts the ESAPI logging level (a number) into the levels used by Java's logger.
-         * @param level The ESAPI to convert.
-         * @return The Java logging Level that is equivalent.
-         * @throws IllegalArgumentException if the supplied ESAPI level doesn't make a level that is currently defined.
-         */
-        private static Level convertESAPILeveltoLoggerLevel(int level)
-        {
-        	switch (level) {
-        		case Logger.OFF:     return Level.OFF;
-        		case Logger.FATAL:   return Level.SEVERE;
-        		case Logger.ERROR:   return JavaLoggerLevel.ERROR_LEVEL; // This is a custom level.
-        		case Logger.WARNING: return Level.WARNING;
-        		case Logger.INFO:    return Level.INFO;
-        		case Logger.DEBUG:   return Level.FINE;
-        		case Logger.TRACE:   return Level.FINEST;
-        		case Logger.ALL:     return Level.ALL;       		
-        		default: {
-        			throw new IllegalArgumentException("Invalid logging level. Value was: " + level);
-        		}
-        	}
-        }
-
-        /**
-    	* {@inheritDoc}
-    	*/
-        public void trace(EventType type, String message, Throwable throwable) {
-            log(Level.FINEST, type, message, throwable);
-        }
-
-        /**
-    	* {@inheritDoc}
-    	*/
-        public void trace(EventType type, String message) {
-            log(Level.FINEST, type, message, null);
-        }
-
-        /**
-    	* {@inheritDoc}
-    	*/
-        public void debug(EventType type, String message, Throwable throwable) {
-            log(Level.FINE, type, message, throwable);
-        }
-
-        /**
-    	* {@inheritDoc}
-    	*/
-        public void debug(EventType type, String message) {
-            log(Level.FINE, type, message, null);
-        }
-
-        /**
-    	* {@inheritDoc}
-    	*/
-        public void info(EventType type, String message) {
-            log(Level.INFO, type, message, null);
-        }
-
-        /**
-    	* {@inheritDoc}
-    	*/
-        public void info(EventType type, String message, Throwable throwable) {
-            log(Level.INFO, type, message, throwable);
-        }
-
-        /**
-    	* {@inheritDoc}
-    	*/
-        public void warning(EventType type, String message, Throwable throwable) {
-            log(Level.WARNING, type, message, throwable);
-        }
-
-        /**
-    	* {@inheritDoc}
-    	*/
-        public void warning(EventType type, String message) {
-            log(Level.WARNING, type, message, null);
-        }
-
-        /**
-    	* {@inheritDoc}
-    	*/
-        public void error(EventType type, String message, Throwable throwable) {
-            log(Level.SEVERE, type, message, throwable);
-        }
-
-        /**
-    	* {@inheritDoc}
-    	*/
-        public void error(EventType type, String message) {
-            log(Level.SEVERE, type, message, null);
-        }
-
-        /**
-    	* {@inheritDoc}
-    	*/
-        public void fatal(EventType type, String message, Throwable throwable) {
-            log(Level.SEVERE, type, message, throwable);
-        }
-
-        /**
-    	* {@inheritDoc}
-    	*/
-        public void fatal(EventType type, String message) {
-            log(Level.SEVERE, type, message, null);
-        }
-
-        /**
-         * Log the message after optionally encoding any special characters that might be dangerous when viewed
-         * by an HTML based log viewer. Also encode any carriage returns and line feeds to prevent log 
-         * injection attacks. This logs all the supplied parameters plus the user ID, user's source IP, a logging
-         * specific session ID, and the current date/time.
-         * 
-         * It will only log the message if the current logging level is enabled, otherwise it will 
-         * discard the message. 
-         * 
-         * @param level defines the set of recognized logging levels (TRACE, INFO, DEBUG, WARNING, ERROR, FATAL)
-         * @param type the type of the event (SECURITY SUCCESS, SECURITY FAILURE, EVENT SUCCESS, EVENT FAILURE)
-         * @param message the message
-         * @param throwable the throwable
-         */
-        private void log(Level level, EventType type, String message, Throwable throwable) {
-        	
-        	// Check to see if we need to log
-        	if (!jlogger.isLoggable( level )) return;
-
-            // ensure there's something to log
-            if ( message == null ) {
-            	message = "";
-            }
-            
-            // ensure no CRLF injection into logs for forging records
-            String clean = message.replace( '\n', '_' ).replace( '\r', '_' );
-            if ( ESAPI.securityConfiguration().getLogEncodingRequired() ) {
-            	clean = ESAPI.encoder().encodeForHTML(message);
-                if (!message.equals(clean)) {
-                    clean += " (Encoded)";
-                }
-            }
-
-			// log server, port, app name, module name -- server:80/app/module
-			StringBuilder appInfo = new StringBuilder();
-			if ( ESAPI.currentRequest() != null && logServerIP ) {
-				appInfo.append( ESAPI.currentRequest().getLocalAddr() + ":" + ESAPI.currentRequest().getLocalPort() );
-			}
-			if ( logAppName ) {
-				appInfo.append( "/" + applicationName );
-			}
-			appInfo.append( "/"  + moduleName );
-			
-			//get the type text if it exists
-			String typeInfo = "";
-			if (type != null) {
-				typeInfo += type + " ";
-			}
-			
-			// log the message
-			jlogger.log(level, "[" + typeInfo + getUserInfo() + " -> " + appInfo + "] " + clean, throwable);
-        }
-
-        /**
-    	* {@inheritDoc}
-    	*/
-        public boolean isDebugEnabled() {
-    	    return jlogger.isLoggable(Level.FINE);
-        }
-
-        /**
-    	* {@inheritDoc}
-    	*/
-        public boolean isErrorEnabled() {
-    	    return jlogger.isLoggable(JavaLoggerLevel.ERROR_LEVEL);
-        }
-
-        /**
-    	* {@inheritDoc}
-    	*/
-        public boolean isFatalEnabled() {
-    	    return jlogger.isLoggable(Level.SEVERE);
-        }
-
-        /**
-    	* {@inheritDoc}
-    	*/
-        public boolean isInfoEnabled() {
-    	    return jlogger.isLoggable(Level.INFO);
-        }
-
-        /**
-    	* {@inheritDoc}
-    	*/
-        public boolean isTraceEnabled() {
-    	    return jlogger.isLoggable(Level.FINEST);
-        }
-
-        /**
-    	* {@inheritDoc}
-    	*/
-        public boolean isWarningEnabled() {
-    	    return jlogger.isLoggable(Level.WARNING);
-        }
-        
-        public String getUserInfo() {
-            // create a random session number for the user to represent the user's 'session', if it doesn't exist already
-            String sid = null;
-            HttpServletRequest request = ESAPI.httpUtilities().getCurrentRequest();
-            if ( request != null ) {
-                HttpSession session = request.getSession( false );
-                if ( session != null ) {
-	                sid = (String)session.getAttribute("ESAPI_SESSION");
-	                // if there is no session ID for the user yet, we create one and store it in the user's session
-		            if ( sid == null ) {
-		            	sid = ""+ ESAPI.randomizer().getRandomInteger(0, 1000000);
-		            	session.setAttribute("ESAPI_SESSION", sid);
-		            }
-                }
-            }
-            
-			// log user information - username:session@ipaddr
-			User user = ESAPI.authenticator().getCurrentUser();            
-			String userInfo = "";
-			//TODO - Make Type Logging configurable
-			if ( user != null) {
-				userInfo += user.getAccountName()+ ":" + sid + "@"+ user.getLastHostAddress();
-			}
-			
-			return userInfo;
-        }
-
-    	/**
-    	 * {@inheritDoc}
-    	 */
-		public void always(EventType type, String message) {
-            always(type, message, null);	
-		}
-
-		/**
-		 * {@inheritDoc}
-		 */
-		public void always(EventType type, String message, Throwable throwable) {
-            log(Level.OFF, type, message, throwable);  // Seems backward, but this is what works, not Level.ALL	
-		}
-    }
-}
Index: src/main/java/org/owasp/esapi/reference/Log4JLogFactory.java
===================================================================
--- src/main/java/org/owasp/esapi/reference/Log4JLogFactory.java	(revision 1961)
+++ src/main/java/org/owasp/esapi/reference/Log4JLogFactory.java	(working copy)
@@ -1,91 +0,0 @@
-/**
- * OWASP Enterprise Security API (ESAPI)
- *
- * This file is part of the Open Web Application Security Project (OWASP)
- * Enterprise Security API (ESAPI) project. For details, please see
- * <a href="http://www.owasp.org/index.php/ESAPI">http://www.owasp.org/index.php/ESAPI</a>.
- *
- * Copyright (c) 2007 - The OWASP Foundation
- *
- * The ESAPI is published by OWASP under the BSD license. You should read and accept the
- * LICENSE before you use, modify, and/or redistribute this software.
- *
- * @author Jeff Williams <a href="http://www.aspectsecurity.com">Aspect Security</a>
- * @created 2007
- */
-package org.owasp.esapi.reference;
-
-import java.util.HashMap;
-
-import org.apache.log4j.LogManager;
-import org.apache.log4j.spi.LoggerFactory;
-
-import org.owasp.esapi.ESAPI;
-import org.owasp.esapi.LogFactory;
-import org.owasp.esapi.Logger;
-
-/**
- * Reference implementation of the LogFactory interface. This implementation uses the Apache Log4J package, and marks each
- * log message with the currently logged in user and the word "SECURITY" for security related events. See the 
- * <a href="JavaLogFactory.JavaLogger.html">JavaLogFactory.JavaLogger</a> Javadocs for the details on the JavaLogger reference implementation.
- * 
- * At class initialization time, the file log4j.properties or log4j.xml file will be loaded from the classpath. This configuration file is 
- * fundamental to make log4j work for you. Please see http://logging.apache.org/log4j/1.2/manual.html for more information.
- *
- * Note that <b>you must specify the LogFactory</b> in either log4j.properties:
- *
- * <code>
- *     log4j.loggerFactory=org.owasp.esapi.reference.Log4JLoggerFactory
- * </code>
- *
- * or log4j.xml:
- * 
- * <code>
- *     &lt;loggerFactory class="org.owasp.esapi.reference.Log4JLoggerFactory"/&gt;
-
- * </code>
- * 
- * @author Mike H. Fauzy (mike.fauzy@aspectsecurity.com) <a href="http://www.aspectsecurity.com">Aspect Security</a>
- * @author Jim Manico (jim@manico.net) <a href="http://www.manico.net">Manico.net</a>
- * @author Jeff Williams (jeff.williams .at. aspectsecurity.com) <a href="http://www.aspectsecurity.com">Aspect Security</a>
- * @author August Detlefsen (augustd at codemagi dot com) <a href="http://www.codemagi.com">CodeMagi, Inc.</a>
- * @since June 1, 2007
- * @see org.owasp.esapi.LogFactory
- * @see org.owasp.esapi.reference.Log4JLogger
- * @see org.owasp.esapi.reference.Log4JLoggerFactory
- */
-public class Log4JLogFactory implements LogFactory {
-
-	private static volatile LogFactory singletonInstance;
-
-	//The Log4j logger factory to use
-	LoggerFactory factory = new Log4JLoggerFactory();
-
-    public static LogFactory getInstance() {
-        if ( singletonInstance == null ) {
-            synchronized ( Log4JLogFactory.class ) {
-                if ( singletonInstance == null ) {
-                    singletonInstance = new Log4JLogFactory();
-                }
-            }
-        }
-        return singletonInstance;
-    }
-	
-	protected Log4JLogFactory() {}
-	
-	/**
-	* {@inheritDoc}
-	*/
-	public org.owasp.esapi.Logger getLogger(Class clazz) {
-		return (org.owasp.esapi.Logger)LogManager.getLogger(clazz.getName(), factory);
-    }
-
-    /**
-	* {@inheritDoc}
-	*/
-	public org.owasp.esapi.Logger getLogger(String moduleName) {
-		return (org.owasp.esapi.Logger)LogManager.getLogger(moduleName, factory);
-    }
-
-}
\ No newline at end of file
Index: src/main/java/org/owasp/esapi/reference/Log4JLogger.java
===================================================================
--- src/main/java/org/owasp/esapi/reference/Log4JLogger.java	(revision 1961)
+++ src/main/java/org/owasp/esapi/reference/Log4JLogger.java	(working copy)
@@ -1,525 +0,0 @@
-/**
- * OWASP Enterprise Security API (ESAPI)
- *
- * This file is part of the Open Web Application Security Project (OWASP)
- * Enterprise Security API (ESAPI) project. For details, please see
- * <a href="http://www.owasp.org/index.php/ESAPI">http://www.owasp.org/index.php/ESAPI</a>.
- *
- * Copyright (c) 2007 - The OWASP Foundation
- *
- * The ESAPI is published by OWASP under the BSD license. You should read and accept the
- * LICENSE before you use, modify, and/or redistribute this software.
- *
- * @author Jeff Williams <a href="http://www.aspectsecurity.com">Aspect Security</a>
- * @created 2007
- */
-package org.owasp.esapi.reference;
-
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpSession;
-import org.apache.log4j.Category;
-import org.apache.log4j.Level;
-import org.apache.log4j.LogManager;
-import org.apache.log4j.Logger;
-import org.apache.log4j.spi.LoggerFactory;
-import org.owasp.esapi.ESAPI;
-import org.owasp.esapi.User;
-
-/**
- * Reference implementation of the Logger interface. This implementation extends org.apache.log4j.Logger
- * in order to take advantage of per-class and per-package configuration options provided by Log4J. 
- *
- * @author August Detlefsen (augustd at codemagi dot com)
- *         <a href="http://www.codemagi.com">CodeMagi, Inc.</a>
- * @since October 15, 2010
- * @see org.owasp.esapi.reference.Log4JLogFactory
- * @see org.owasp.esapi.reference.Log4JLoggerFactory
- */
-public class Log4JLogger extends org.apache.log4j.Logger implements org.owasp.esapi.Logger {
-
-	/** The log factory to use in creating new instances. */
-	private static LoggerFactory factory = new Log4JLoggerFactory();
-
-	/** The application name using this log */
-	private static String applicationName = ESAPI.securityConfiguration().getApplicationName();
-
-	/** Log the application name? */
-	private static boolean logAppName = ESAPI.securityConfiguration().getLogApplicationName();
-	
-	/** Log the server ip? */
-	private static boolean logServerIP = ESAPI.securityConfiguration().getLogServerIP();
-
-	public Log4JLogger(String name) {
-		super(name);
-	}
-
-	/**
-	 * This method overrides {@link Logger#getInstance} by supplying
-	 * its own factory type as a parameter.
-	 */
-	public static Category getInstance(String name) {
-		return LogManager.getLogger(name, factory);
-	}
-
-	/**
-	 * This method overrides {@link Logger#getInstance} by supplying
-	 * its own factory type as a parameter.
-	 */
-	public static Category getInstance(Class clazz) {
-		return LogManager.getLogger(clazz.getName(), factory);
-	}
-
-	/**
-	 * This method overrides {@link Logger#getLogger} by supplying
-	 * its own factory type as a parameter.
-	 */
-	public static Logger getLogger(String name) {
-		return LogManager.getLogger(name, factory);
-	}
-
-	/**
-	 * This method overrides {@link Logger#getLogger} by supplying
-	 * its own factory type as a parameter.
-	 */
-	public static org.apache.log4j.Logger getLogger(Class clazz) {
-		return LogManager.getLogger(clazz.getName(), factory);
-	}
-
-	/**
-	 * {@inheritDoc}
-	 * Note: In this implementation, this change is not persistent,
-	 * meaning that if the application is restarted, the log level will revert to the level defined in the
-	 * ESAPI SecurityConfiguration properties file.
-	 */
-	public void setLevel(int level) {
-		try {
-			super.setLevel(convertESAPILeveltoLoggerLevel(level));
-		} catch (IllegalArgumentException e) {
-			this.error(org.owasp.esapi.Logger.SECURITY_FAILURE, "", e);
-		}
-	}
-	
-	/**
-	 * {@inheritDoc}
-	 * Explanation: Since this class extends Log4j's Logger class which has a
-	 * {@code getLevel()} method that returns {@code extended by org.apache.log4j.Level},
-	 * we can't simply have a {@code getLevel()} that simply returns an {@code int}.
-	 * Hence we renamed it to {@code getESAPILevel()}.
-	 */
-	public int getESAPILevel() {
-		Level level = super.getLevel();
-    return (level == null ) ? Level.OFF_INT : level.toInt();
-	}
-
-	/**
-	 * Converts the ESAPI logging level (a number) into the levels used by Java's logger.
-	 * @param level The ESAPI to convert.
-	 * @return The Log4J logging Level that is equivalent.
-	 * @throws IllegalArgumentException if the supplied ESAPI level doesn't make a level that is currently defined.
-	 */
-	private static Level convertESAPILeveltoLoggerLevel(int level) {
-		switch (level) {
-		case org.owasp.esapi.Logger.OFF:
-			return Level.OFF;
-		case org.owasp.esapi.Logger.FATAL:
-			return Level.FATAL;
-		case org.owasp.esapi.Logger.ERROR:
-			return Level.ERROR;
-		case org.owasp.esapi.Logger.WARNING:
-			return Level.WARN;
-		case org.owasp.esapi.Logger.INFO:
-			return Level.INFO;
-		case org.owasp.esapi.Logger.DEBUG:
-			return Level.DEBUG; //fine
-		case org.owasp.esapi.Logger.TRACE:
-			return Level.TRACE; //finest
-		case org.owasp.esapi.Logger.ALL:
-			return Level.ALL;
-		default: {
-			throw new IllegalArgumentException("Invalid logging level. Value was: " + level);
-		}
-		}
-	}
-
-	/**
-	 * {@inheritDoc}
-	 */
-	public void always(EventType type, String message, Throwable throwable) {
-		log(Level.OFF, type, message, throwable);	// Seems like Level.ALL is what we
-													// would want here, but this is what
-													// works. Level.ALL does not.
-	}
-
-	/**
-	 * {@inheritDoc}
-	 */
-	public void always(EventType type, String message) {
-		always(type, message, null);
-	}
-	
-	/**
-	 * {@inheritDoc}
-	 */
-	public void trace(EventType type, String message, Throwable throwable) {
-		log(Level.TRACE, type, message, throwable);
-	}
-
-	/**
-	 * {@inheritDoc}
-	 */
-	public void trace(EventType type, String message) {
-		log(Level.TRACE, type, message, null);
-	}
-
-	/**
-	 * {@inheritDoc}
-	 */
-	public void debug(EventType type, String message, Throwable throwable) {
-		log(Level.DEBUG, type, message, throwable);
-	}
-
-	/**
-	 * {@inheritDoc}
-	 */
-	public void debug(EventType type, String message) {
-		log(Level.DEBUG, type, message, null);
-	}
-
-	/**
-	 * {@inheritDoc}
-	 */
-	public void info(EventType type, String message) {
-		log(Level.INFO, type, message, null);
-	}
-
-	/**
-	 * {@inheritDoc}
-	 */
-	public void info(EventType type, String message, Throwable throwable) {
-		log(Level.INFO, type, message, throwable);
-	}
-
-	/**
-	 * {@inheritDoc}
-	 */
-	public void warning(EventType type, String message, Throwable throwable) {
-		log(Level.WARN, type, message, throwable);
-	}
-
-	/**
-	 * {@inheritDoc}
-	 */
-	public void warning(EventType type, String message) {
-		log(Level.WARN, type, message, null);
-	}
-
-	/**
-	 * {@inheritDoc}
-	 */
-	public void error(EventType type, String message, Throwable throwable) {
-		log(Level.ERROR, type, message, throwable);
-	}
-
-	/**
-	 * {@inheritDoc}
-	 */
-	public void error(EventType type, String message) {
-		log(Level.ERROR, type, message, null);
-	}
-
-	/**
-	 * {@inheritDoc}
-	 */
-	public void fatal(EventType type, String message, Throwable throwable) {
-		log(Level.FATAL, type, message, throwable);
-	}
-
-	/**
-	 * {@inheritDoc}
-	 */
-	public void fatal(EventType type, String message) {
-		log(Level.FATAL, type, message, null);
-	}
-
-	/**
-	 * Always log the specified message as a {@code SECURITY_AUDIT} event type.
-	 * 
-	 * @param message	The {@code String} representation of the specified message as
-	 * 					logged by calling the object's {@code toString()} method.
-	 */
-	public void always(Object message) {
-		this.always(message, null);
-	}
-
-	/**
-	 * Always log the specified message as a {@code SECURITY_AUDIT} event type, along
-	 * with its associated exception stack trace (if any).
-	 * 
-	 * @param message	The {@code String} representation of the specified message as
-	 * 					logged by calling the object's {@code toString()} method.
-	 */
-	public void always(Object message, Throwable throwable) {
-		String toLog = (message instanceof String) ? (String) message : message.toString();
-		this.always(org.owasp.esapi.Logger.SECURITY_AUDIT, toLog, throwable);
-	}
-	
-	/**
-	 * {@inheritDoc}
-	 */
-	@Override
-	public void trace(Object message) {
-
-		String toLog = (message instanceof String) ? (String) message : message.toString();
-
-		this.trace(org.owasp.esapi.Logger.EVENT_UNSPECIFIED, toLog);
-	}
-
-	/**
-	 * {@inheritDoc}
-	 */
-	@Override
-	public void trace(Object message, Throwable throwable) {
-
-		String toLog = (message instanceof String) ? (String) message : message.toString();
-
-		this.trace(org.owasp.esapi.Logger.EVENT_UNSPECIFIED, toLog, throwable);
-	}
-
-	/**
-	 * {@inheritDoc}
-	 */
-	@Override
-	public void debug(Object message) {
-
-		String toLog = (message instanceof String) ? (String) message : message.toString();
-
-		this.debug(org.owasp.esapi.Logger.EVENT_UNSPECIFIED, toLog);
-	}
-
-	/**
-	 * {@inheritDoc}
-	 */
-	@Override
-	public void debug(Object message, Throwable throwable) {
-
-		String toLog = (message instanceof String) ? (String) message : message.toString();
-
-		this.debug(org.owasp.esapi.Logger.EVENT_UNSPECIFIED, toLog, throwable);
-	}
-
-	/**
-	 * {@inheritDoc}
-	 */
-	@Override
-	public void info(Object message) {
-
-		String toLog = (message instanceof String) ? (String) message : message.toString();
-
-		this.info(org.owasp.esapi.Logger.EVENT_UNSPECIFIED, toLog);
-	}
-
-	/**
-	 * {@inheritDoc}
-	 */
-	@Override
-	public void info(Object message, Throwable throwable) {
-
-		String toLog = (message instanceof String) ? (String) message : message.toString();
-
-		this.info(org.owasp.esapi.Logger.EVENT_UNSPECIFIED, toLog, throwable);
-	}
-
-	/**
-	 * {@inheritDoc}
-	 */
-	@Override
-	public void warn(Object message) {
-
-		String toLog = (message instanceof String) ? (String) message : message.toString();
-
-		this.warning(org.owasp.esapi.Logger.EVENT_UNSPECIFIED, toLog);
-	}
-
-	/**
-	 * {@inheritDoc}
-	 */
-	@Override
-	public void warn(Object message, Throwable throwable) {
-
-		String toLog = (message instanceof String) ? (String) message : message.toString();
-
-		this.warning(org.owasp.esapi.Logger.EVENT_UNSPECIFIED, toLog, throwable);
-	}
-
-	/**
-	 * {@inheritDoc}
-	 */
-	@Override
-	public void error(Object message) {
-
-		String toLog = (message instanceof String) ? (String) message : message.toString();
-
-		this.error(org.owasp.esapi.Logger.EVENT_UNSPECIFIED, toLog);
-	}
-
-	/**
-	 * {@inheritDoc}
-	 */
-	@Override
-	public void error(Object message, Throwable throwable) {
-
-		String toLog = (message instanceof String) ? (String) message : message.toString();
-
-		this.error(org.owasp.esapi.Logger.EVENT_UNSPECIFIED, toLog, throwable);
-	}
-
-	/**
-	 * {@inheritDoc}
-	 */
-	@Override
-	public void fatal(Object message) {
-
-		String toLog = (message instanceof String) ? (String) message : message.toString();
-
-		this.fatal(org.owasp.esapi.Logger.EVENT_UNSPECIFIED, toLog);
-	}
-
-	/**
-	 * {@inheritDoc}
-	 */
-	@Override
-	public void fatal(Object message, Throwable throwable) {
-
-		String toLog = (message instanceof String) ? (String) message : message.toString();
-
-		this.fatal(org.owasp.esapi.Logger.EVENT_UNSPECIFIED, toLog, throwable);
-	}
-
-	/**
-	 * Log the message after optionally encoding any special characters that might be dangerous when viewed
-	 * by an HTML based log viewer. Also encode any carriage returns and line feeds to prevent log
-	 * injection attacks. This logs all the supplied parameters plus the user ID, user's source IP, a logging
-	 * specific session ID, and the current date/time.
-	 *
-	 * It will only log the message if the current logging level is enabled, otherwise it will
-	 * discard the message.
-	 *
-	 * @param level defines the set of recognized logging levels (TRACE, INFO, DEBUG, WARNING, ERROR, FATAL)
-	 * @param type the type of the event (SECURITY SUCCESS, SECURITY FAILURE, EVENT SUCCESS, EVENT FAILURE)
-	 * @param message the message to be logged
-	 * @param throwable the {@code Throwable} from which to generate an exception stack trace.
-	 */
-	private void log(Level level, EventType type, String message, Throwable throwable) {
-
-		// Check to see if we need to log.
-		if (!isEnabledFor(level)) {
-			return;
-		}
-
-		// ensure there's something to log
-		if (message == null) {
-			message = "";
-		}
-
-		// ensure no CRLF injection into logs for forging records
-		String clean = message.replace('\n', '_').replace('\r', '_');
-		if (ESAPI.securityConfiguration().getLogEncodingRequired()) {
-			clean = ESAPI.encoder().encodeForHTML(message);
-			if (!message.equals(clean)) {
-				clean += " (Encoded)";
-			}
-		}
-
-		// log server, port, app name, module name -- server:80/app/module
-		StringBuilder appInfo = new StringBuilder();
-		if (ESAPI.currentRequest() != null && logServerIP) {
-			appInfo.append(ESAPI.currentRequest().getLocalAddr()).append(":").append(ESAPI.currentRequest().getLocalPort());
-		}
-		if (logAppName) {
-			appInfo.append("/").append(applicationName);
-		}
-		appInfo.append("/").append(getName());
-
-		//get the type text if it exists
-		String typeInfo = "";
-		if (type != null) {
-			typeInfo += type + " ";
-		}
-
-		// log the message
-		log(level, "[" + typeInfo + getUserInfo() + " -> " + appInfo + "] " + clean, throwable);
-	}
-
-	/**
-	 * {@inheritDoc}
-	 */
-	@Override
-	public boolean isDebugEnabled() {
-		return isEnabledFor(Level.DEBUG);
-	}
-
-	/**
-	 * {@inheritDoc}
-	 */
-	public boolean isErrorEnabled() {
-		return isEnabledFor(Level.ERROR);
-	}
-
-	/**
-	 * {@inheritDoc}
-	 */
-	public boolean isFatalEnabled() {
-		return isEnabledFor(Level.FATAL);
-	}
-
-	/**
-	 * {@inheritDoc}
-	 */
-	@Override
-	public boolean isInfoEnabled() {
-		return isEnabledFor(Level.INFO);
-	}
-
-	/**
-	 * {@inheritDoc}
-	 */
-	@Override
-	public boolean isTraceEnabled() {
-		return isEnabledFor(Level.TRACE);
-	}
-
-	/**
-	 * {@inheritDoc}
-	 */
-	public boolean isWarningEnabled() {
-		return isEnabledFor(Level.WARN);
-	}
-
-	public String getUserInfo() {
-		// create a random session number for the user to represent the user's 'session', if it doesn't exist already
-		String sid = null;
-		HttpServletRequest request = ESAPI.httpUtilities().getCurrentRequest();
-		if (request != null) {
-			HttpSession session = request.getSession(false);
-			if (session != null) {
-				sid = (String) session.getAttribute("ESAPI_SESSION");
-				// if there is no session ID for the user yet, we create one and store it in the user's session
-				if (sid == null) {
-					sid = "" + ESAPI.randomizer().getRandomInteger(0, 1000000);
-					session.setAttribute("ESAPI_SESSION", sid);
-				}
-			}
-		}
-
-		// log user information - username:session@ipaddr
-		User user = ESAPI.authenticator().getCurrentUser();
-		String userInfo = "";
-		//TODO - make type logging configurable
-		if (user != null) {
-			userInfo += user.getAccountName() + ":" + sid + "@" + user.getLastHostAddress();
-		}
-
-		return userInfo;
-	}
-	
-}
\ No newline at end of file
Index: src/main/java/org/owasp/esapi/reference/Log4JLoggerFactory.java
===================================================================
--- src/main/java/org/owasp/esapi/reference/Log4JLoggerFactory.java	(revision 1961)
+++ src/main/java/org/owasp/esapi/reference/Log4JLoggerFactory.java	(working copy)
@@ -1,47 +0,0 @@
-/**
- * OWASP Enterprise Security API (ESAPI)
- *
- * This file is part of the Open Web Application Security Project (OWASP)
- * Enterprise Security API (ESAPI) project. For details, please see
- * <a href="http://www.owasp.org/index.php/ESAPI">http://www.owasp.org/index.php/ESAPI</a>.
- *
- * Copyright (c) 2007 - The OWASP Foundation
- *
- * The ESAPI is published by OWASP under the BSD license. You should read and accept the
- * LICENSE before you use, modify, and/or redistribute this software.
- *
- * @author Jeff Williams <a href="http://www.aspectsecurity.com">Aspect Security</a>
- * @created 2007
- */
-package org.owasp.esapi.reference;
-
-import org.apache.log4j.spi.LoggerFactory;
-
-/**
- * Implementation of the LoggerFactory interface. This implementation has been 
- * overridden to return instances of org.owasp.esapi.reference.Log4JLogger.
- *
- * @author August Detlefsen (augustd at codemagi dot com)
- *         <a href="http://www.codemagi.com">CodeMagi, Inc.</a>
- * @since October 15, 2010
- * @see org.owasp.esapi.reference.Log4JLogFactory
- * @see org.owasp.esapi.reference.Log4JLogger
- */
-public class Log4JLoggerFactory implements LoggerFactory {
-
-	/**
-	 * This constructor must be public so it can be accessed from within log4j
-	 */
-	public Log4JLoggerFactory() {}
-
-	/**
-	 * Overridden to return instances of org.owasp.esapi.reference.Log4JLogger.
-	 * 
-	 * @param name The class name to return a logger for.
-	 * @return org.owasp.esapi.reference.Log4JLogger
-	 */
-	public org.apache.log4j.Logger makeNewLoggerInstance(String name) {
-		return new Log4JLogger(name);
-	}
-	
-}
Index: src/main/java/org/owasp/esapi/reference/accesscontrol/ExperimentalAccessController.java
===================================================================
--- src/main/java/org/owasp/esapi/reference/accesscontrol/ExperimentalAccessController.java	(revision 1961)
+++ src/main/java/org/owasp/esapi/reference/accesscontrol/ExperimentalAccessController.java	(working copy)
@@ -5,7 +5,7 @@
 import org.owasp.esapi.AccessControlRule;
 import org.owasp.esapi.AccessController;
 import org.owasp.esapi.ESAPI;
-import org.owasp.esapi.Logger;
+import org.slf4j.Logger;
 import org.owasp.esapi.errors.AccessControlException;
 import org.owasp.esapi.reference.accesscontrol.policyloader.ACRPolicyFileLoader;
 import org.owasp.esapi.reference.accesscontrol.policyloader.PolicyDTO;
@@ -31,7 +31,7 @@
 				throw new AccessControlException("Access Denied",
 						"AccessControlRule was not found for key: " + key); 
 			}
-			if(logger.isDebugEnabled()){ logger.debug(Logger.EVENT_SUCCESS, "Evaluating Authorization Rule \"" + key + "\" Using class: " + rule.getClass().getCanonicalName()); }
+			if(logger.isDebugEnabled()){ logger.debug(ESAPI.getEventsuccessMarker(), "Evaluating Authorization Rule \"" + key + "\" Using class: " + rule.getClass().getCanonicalName()); }
 			return rule.isAuthorized(runtimeParameter);
 		} catch(Exception e) {
 			try {
@@ -57,7 +57,7 @@
 				throw new AccessControlException("Access Denied", 
 						"AccessControlRule was not found for key: " + key); 
 			}
-			if(logger.isDebugEnabled()){ logger.debug(Logger.EVENT_SUCCESS, "Asserting Authorization Rule \"" + key + "\" Using class: " + rule.getClass().getCanonicalName()); }
+			if(logger.isDebugEnabled()){ logger.debug(ESAPI.getEventsuccessMarker(), "Asserting Authorization Rule \"" + key + "\" Using class: " + rule.getClass().getCanonicalName()); }
 			isAuthorized = rule.isAuthorized(runtimeParameter);
 		} catch(Exception e) {
 			//TODO figure out what which string goes where.		
Index: src/main/java/org/owasp/esapi/reference/accesscontrol/FileBasedACRs.java
===================================================================
--- src/main/java/org/owasp/esapi/reference/accesscontrol/FileBasedACRs.java	(revision 1961)
+++ src/main/java/org/owasp/esapi/reference/accesscontrol/FileBasedACRs.java	(working copy)
@@ -28,7 +28,7 @@
 import java.util.Set;
 
 import org.owasp.esapi.ESAPI;
-import org.owasp.esapi.Logger;
+import org.slf4j.Logger;
 import org.owasp.esapi.User;
 import org.owasp.esapi.errors.AccessControlException;
 import org.owasp.esapi.errors.EncodingException;
@@ -383,7 +383,7 @@
 			String canonical = ESAPI.encoder().canonicalize(((String)roles.get(x)).trim());
 
 			if(!ESAPI.validator().isValidInput("Validating user roles in FileBasedAccessController", canonical, "RoleName", 20, false)) {
-				logger.warning( Logger.SECURITY_FAILURE, "Role: " + ((String)roles.get(x)).trim() + " is invalid, so was not added to the list of roles for this Rule.");
+				logger.warn( ESAPI.getSecurityFailureMarker(), "Role: " + ((String)roles.get(x)).trim() + " is invalid, so was not added to the list of roles for this Rule.");
 			} else { 
 				ret.add(canonical.trim());
 			}
@@ -429,7 +429,7 @@
 					String action = parts[2].trim();
 					rule.allow = action.equalsIgnoreCase("allow");
 					if (map.containsKey(rule.path)) {
-						logger.warning( Logger.SECURITY_FAILURE, "Problem in access control file. Duplicate rule ignored: " + rule);
+						logger.warn( ESAPI.getSecurityFailureMarker(), "Problem in access control file. Duplicate rule ignored: " + rule);
 					} else {
 						map.put(rule.path, rule);
 					}
@@ -436,7 +436,7 @@
 				}
 			}
 		} catch (Exception e) {
-			logger.warning( Logger.SECURITY_FAILURE, "Problem in access control file: " + ruleset, e );
+			logger.warn( ESAPI.getSecurityFailureMarker(), "Problem in access control file: " + ruleset, e );
 		} finally {
 			try {
 				if (is != null) {
@@ -443,7 +443,7 @@
 					is.close();
 				}
 			} catch (IOException e) {
-				logger.warning(Logger.SECURITY_FAILURE, "Failure closing access control file: " + ruleset, e);
+				logger.warn(ESAPI.getSecurityFailureMarker(), "Failure closing access control file: " + ruleset, e);
 			}
 		}
 		return map;
@@ -487,7 +487,7 @@
 						rule.actions.add(((String) action.get(x)).trim());
 					
 					if (map.containsKey(rule.path)) {
-						logger.warning( Logger.SECURITY_FAILURE, "Problem in access control file. Duplicate rule ignored: " + rule);
+						logger.warn( ESAPI.getSecurityFailureMarker(), "Problem in access control file. Duplicate rule ignored: " + rule);
 					} else {
 						map.put(rule.clazz, rule);		
 					}
@@ -494,7 +494,7 @@
 				}
 			}
 		} catch (Exception e) {
-			logger.warning( Logger.SECURITY_FAILURE, "Problem in access control file : " + ruleset, e );
+			logger.warn( ESAPI.getSecurityFailureMarker(), "Problem in access control file : " + ruleset, e );
 		} finally {
 			
 			try {
@@ -502,7 +502,7 @@
 					is.close();
 				}
 			} catch (IOException e) {
-				logger.warning(Logger.SECURITY_FAILURE, "Failure closing access control file : " + ruleset, e);
+				logger.warn(ESAPI.getSecurityFailureMarker(), "Failure closing access control file : " + ruleset, e);
 			}
 		}
 		return map;
Index: src/main/java/org/owasp/esapi/reference/accesscontrol/policyloader/ACRPolicyFileLoader.java
===================================================================
--- src/main/java/org/owasp/esapi/reference/accesscontrol/policyloader/ACRPolicyFileLoader.java	(revision 1961)
+++ src/main/java/org/owasp/esapi/reference/accesscontrol/policyloader/ACRPolicyFileLoader.java	(working copy)
@@ -6,7 +6,7 @@
 import org.apache.commons.configuration.ConfigurationException;
 import org.apache.commons.configuration.XMLConfiguration;
 import org.owasp.esapi.ESAPI;
-import org.owasp.esapi.Logger;
+import org.slf4j.Logger;
 import org.owasp.esapi.errors.AccessControlException;
 
 final public class ACRPolicyFileLoader {
@@ -29,7 +29,7 @@
 		} 
 
 		Object property = config.getProperty("AccessControlRules.AccessControlRule[@name]");
-		logger.info(Logger.EVENT_SUCCESS, "Loading Property: " + property);
+		logger.info(ESAPI.getEventsuccessMarker(), "Loading Property: " + property);
 		int numberOfRules = 0;
 		if(property instanceof Collection) {
 			numberOfRules = ((Collection)property).size();
@@ -40,21 +40,21 @@
 		Object rulePolicyParameter = null;
 		int currentRule = 0;
 	    try {	    	
-	    	logger.info(Logger.EVENT_SUCCESS, "Number of rules: " + numberOfRules);
+	    	logger.info(ESAPI.getEventsuccessMarker(), "Number of rules: " + numberOfRules);
 			for(currentRule = 0; currentRule < numberOfRules; currentRule++) {
-				logger.trace(Logger.EVENT_SUCCESS, "----");
+				logger.trace(ESAPI.getEventsuccessMarker(), "----");
 				ruleName = config.getString("AccessControlRules.AccessControlRule(" + currentRule + ")[@name]");
-				logger.trace(Logger.EVENT_SUCCESS, "Rule name: " + ruleName);
+				logger.trace(ESAPI.getEventsuccessMarker(), "Rule name: " + ruleName);
 				ruleClass = config.getString("AccessControlRules.AccessControlRule(" + currentRule + ")[@class]");
-				logger.trace(Logger.EVENT_SUCCESS, "Rule Class: " + ruleClass);
+				logger.trace(ESAPI.getEventsuccessMarker(), "Rule Class: " + ruleClass);
 				rulePolicyParameter = getPolicyParameter(config, currentRule);
-				logger.trace(Logger.EVENT_SUCCESS, "rulePolicyParameters: " + rulePolicyParameter);
+				logger.trace(ESAPI.getEventsuccessMarker(), "rulePolicyParameters: " + rulePolicyParameter);
 				policyDTO.addAccessControlRule(
 						ruleName,
 						ruleClass,
 						rulePolicyParameter);		    	
 			}
-			logger.info(Logger.EVENT_SUCCESS, "policyDTO loaded: " + policyDTO);
+			logger.info(ESAPI.getEventsuccessMarker(), "policyDTO loaded: " + policyDTO);
 		} catch (Exception e) {
 			throw new AccessControlException("Unable to load AccessControlRule parameter. " + 
 					" Rule number: " + currentRule + 
@@ -80,7 +80,7 @@
 		} else {
 			numberOfProperties = 1;
 		}
-		logger.info(Logger.EVENT_SUCCESS, "Number of properties: " + numberOfProperties);
+		logger.info(ESAPI.getEventsuccessMarker(), "Number of properties: " + numberOfProperties);
 		
 		if(numberOfProperties < 1) {
 			return null;
@@ -90,7 +90,7 @@
 			//this default should have a properties file override option
 			parametersLoaderClassName = "org.owasp.esapi.reference.accesscontrol.policyloader.DynaBeanACRParameterLoader";
 		}
-		logger.info(Logger.EVENT_SUCCESS, "Parameters Loader:" + parametersLoaderClassName);
+		logger.info(ESAPI.getEventsuccessMarker(), "Parameters Loader:" + parametersLoaderClassName);
 		ACRParameterLoader acrParamaterLoader = 
 			(ACRParameterLoader)
 			Class.forName(parametersLoaderClassName).newInstance();
Index: src/main/java/org/owasp/esapi/reference/accesscontrol/policyloader/DynaBeanACRParameterLoader.java
===================================================================
--- src/main/java/org/owasp/esapi/reference/accesscontrol/policyloader/DynaBeanACRParameterLoader.java	(revision 1961)
+++ src/main/java/org/owasp/esapi/reference/accesscontrol/policyloader/DynaBeanACRParameterLoader.java	(working copy)
@@ -2,7 +2,7 @@
 
 import org.apache.commons.configuration.XMLConfiguration;
 import org.owasp.esapi.ESAPI;
-import org.owasp.esapi.Logger;
+import org.slf4j.Logger;
 import org.owasp.esapi.reference.accesscontrol.DynaBeanACRParameter;
 
 import static org.owasp.esapi.reference.accesscontrol.policyloader.ACRParameterLoaderHelper.getParameterValue;
@@ -23,7 +23,7 @@
 			policyParameter.set(parameterName, parameterValue);
 		}
 		policyParameter.lock(); //This line makes the policyParameter read only. 
-		logger.info(Logger.SECURITY_SUCCESS, "Loaded " + numberOfParameters + 
+		logger.info(ESAPI.getSecuritySuccessMarker(), "Loaded " + numberOfParameters + 
 				" parameters: " + policyParameter.toString());
 		return policyParameter;
 	}
Index: src/main/java/org/owasp/esapi/reference/crypto/DefaultEncryptedProperties.java
===================================================================
--- src/main/java/org/owasp/esapi/reference/crypto/DefaultEncryptedProperties.java	(revision 1961)
+++ src/main/java/org/owasp/esapi/reference/crypto/DefaultEncryptedProperties.java	(working copy)
@@ -28,7 +28,7 @@
 import java.util.Set;
 
 import org.owasp.esapi.ESAPI;
-import org.owasp.esapi.Logger;
+import org.slf4j.Logger;
 import org.owasp.esapi.crypto.CipherText;
 import org.owasp.esapi.crypto.PlainText;
 import org.owasp.esapi.errors.EncryptionException;
@@ -147,7 +147,7 @@
 	 */
 	public void load(InputStream in) throws IOException {
 		properties.load(in);
-		logger.trace(Logger.SECURITY_SUCCESS, "Encrypted properties loaded successfully");
+		logger.trace(ESAPI.getSecuritySuccessMarker(), "Encrypted properties loaded successfully");
 	}
 
 	/**
@@ -172,9 +172,9 @@
 	 */
 	public static void main(String[] args) throws Exception {
 		File f = new File(args[0]);
-		ESAPI.getLogger( "EncryptedProperties.main" ).debug(Logger.SECURITY_SUCCESS, "Loading encrypted properties from " + f.getAbsolutePath() );
+		ESAPI.getLogger( "EncryptedProperties.main" ).debug(ESAPI.getSecuritySuccessMarker(), "Loading encrypted properties from " + f.getAbsolutePath() );
 		if ( !f.exists() ) throw new IOException( "Properties file not found: " + f.getAbsolutePath() );
-		ESAPI.getLogger( "EncryptedProperties.main" ).debug(Logger.SECURITY_SUCCESS, "Encrypted properties found in " + f.getAbsolutePath() );
+		ESAPI.getLogger( "EncryptedProperties.main" ).debug(ESAPI.getSecuritySuccessMarker(), "Encrypted properties found in " + f.getAbsolutePath() );
 		DefaultEncryptedProperties ep = new DefaultEncryptedProperties();
 
 		FileInputStream in = null;
Index: src/main/java/org/owasp/esapi/reference/crypto/JavaEncryptor.java
===================================================================
--- src/main/java/org/owasp/esapi/reference/crypto/JavaEncryptor.java	(revision 1961)
+++ src/main/java/org/owasp/esapi/reference/crypto/JavaEncryptor.java	(working copy)
@@ -50,7 +50,7 @@
 import org.owasp.esapi.ESAPI;
 import org.owasp.esapi.EncoderConstants;
 import org.owasp.esapi.Encryptor;
-import org.owasp.esapi.Logger;
+import org.slf4j.Logger;
 import org.owasp.esapi.codecs.Hex;
 import org.owasp.esapi.crypto.CipherSpec;
 import org.owasp.esapi.crypto.CipherText;
@@ -146,7 +146,7 @@
             SecurityProviderLoader.loadESAPIPreferredJCEProvider();
         } catch (NoSuchProviderException ex) {
         	// Note that audit logging is done elsewhere in called method.
-            logger.fatal(Logger.SECURITY_FAILURE,
+            logger.error(ESAPI.getSecurityFailureMarker(),
                          "JavaEncryptor failed to load preferred JCE provider.", ex);
             throw new ExceptionInInitializerError(ex);
         }
@@ -422,7 +422,7 @@
 			 //
 			 if ( keySize != keyLen ) {
 				 // DISCUSS: Technically this is not a security "failure" per se, but not really a "success" either.
-				 logger.warning(Logger.SECURITY_FAILURE, "Encryption key length mismatch. ESAPI.EncryptionKeyLength is " +
+				 logger.warn(ESAPI.getSecurityFailureMarker(), "Encryption key length mismatch. ESAPI.EncryptionKeyLength is " +
 						 keyLen + " bits, but length of actual encryption key is " + keySize +
 				 		" bits.  Did you remember to regenerate your master key (if that is what you are using)???");
 			 }
@@ -434,12 +434,12 @@
 				 //	throw the following exception.
 				 //				 throw new ConfigurationException("Actual key size of " + keySize + " bits smaller than specified " +
 				 //						  "encryption key length (ESAPI.EncryptionKeyLength) of " + keyLen + " bits.");
-				 logger.warning(Logger.SECURITY_FAILURE, "Actual key size of " + keySize + " bits SMALLER THAN specified " +
+				 logger.warn(ESAPI.getSecurityFailureMarker(), "Actual key size of " + keySize + " bits SMALLER THAN specified " +
 						 "encryption key length (ESAPI.EncryptionKeyLength) of " + keyLen + " bits with cipher algorithm " + cipherAlg);
 			 }
 			 if ( keySize < 112 ) {		// NIST Special Pub 800-57 considers 112-bits to be the minimally safe key size from 2010-2030.
 				 						// Note that 112 bits 'just happens' to be size of 2-key Triple DES!
-				 logger.warning(Logger.SECURITY_FAILURE, "Potentially unsecure encryption. Key size of " + keySize + "bits " +
+				 logger.warn(ESAPI.getSecurityFailureMarker(), "Potentially unsecure encryption. Key size of " + keySize + "bits " +
 				                "not sufficiently long for " + cipherAlg + ". Should use appropriate algorithm with key size " +
 				                "of *at least* 112 bits except when required by legacy apps. See NIST Special Pub 800-57.");
 			 }
@@ -454,7 +454,7 @@
 				 //			 either, but personally I'd prefer the squeaky wheel to the annoying throwing of
 				 //			 a ConfigurationException (which is a RuntimeException). Less likely to upset
 				 //			 the development community.
-				 logger.warning(Logger.SECURITY_FAILURE, "Encryption mismatch between cipher algorithm (" +
+				 logger.warn(ESAPI.getSecurityFailureMarker(), "Encryption mismatch between cipher algorithm (" +
 						 cipherAlg + ") and SecretKey algorithm (" + skeyAlg + "). Cipher will use algorithm " + cipherAlg);
 			 }
 
@@ -505,7 +505,7 @@
 			 } else {
 				 encrypter.init(Cipher.ENCRYPT_MODE, encKey);
 			 }
-			 logger.debug(Logger.EVENT_SUCCESS, "Encrypting with " + cipherSpec);
+			 logger.debug(ESAPI.getEventsuccessMarker(), "Encrypting with " + cipherSpec);
 			 byte[] raw = encrypter.doFinal(plaintext);
                  // Convert to CipherText.
              CipherText ciphertext = new CipherText(cipherSpec, raw);
@@ -519,7 +519,7 @@
 			    		 							   key, keySize, "authenticity");
 			     ciphertext.computeAndStoreMAC(  authKey );
 			 }
-			 logger.debug(Logger.EVENT_SUCCESS, "JavaEncryptor.encrypt(SecretKey,byte[],boolean,boolean) -- success!");
+			 logger.debug(ESAPI.getEventsuccessMarker(), "JavaEncryptor.encrypt(SecretKey,byte[],boolean,boolean) -- success!");
 			 success = true;	// W00t!!!
 			 return ciphertext;
 		} catch (InvalidKeyException ike) {
@@ -584,7 +584,7 @@
 	                "Invalid cipher mode " + ciphertext.getCipherMode() +
 	        " not permitted for decryption or encryption operations.");
 	    }
-	    logger.debug(Logger.EVENT_SUCCESS,
+	    logger.debug(ESAPI.getEventsuccessMarker(),
 	            "Args valid for JavaEncryptor.decrypt(SecretKey,CipherText): " +
 	            ciphertext);
 
@@ -631,7 +631,7 @@
 	            logMsg = "Programming error: unexpected progress mark == " + progressMark;
 	        break;
 	        }
-	        logger.error(Logger.SECURITY_FAILURE, logMsg);
+	        logger.error(ESAPI.getSecurityFailureMarker(), logMsg);
 	        throw ex;           // Re-throw
 	    }
 	    finally {
@@ -918,7 +918,7 @@
 			try {
 				inBytes = input.getBytes("UTF-8");
 			} catch (UnsupportedEncodingException e) {
-				logger.warning(Logger.SECURITY_FAILURE, "computeHMAC(): Can't find UTF-8 encoding; using default encoding", e);
+				logger.warn(ESAPI.getSecurityFailureMarker(), "computeHMAC(): Can't find UTF-8 encoding; using default encoding", e);
 				inBytes = input.getBytes();
 			}
 			byte[] bytes = hmac.doFinal( inBytes );
@@ -958,7 +958,7 @@
         // counters) and then every Nth time thereafter. Logging every single
         // time is likely to be way too much logging.
         if ( (counter % logEveryNthUse) == 0 ) {
-            logger.warning(Logger.SECURITY_FAILURE, where + msg);
+            logger.warn(ESAPI.getSecurityFailureMarker(), where + msg);
         }
     }
     
Index: src/main/java/org/owasp/esapi/reference/crypto/ReferenceEncryptedProperties.java
===================================================================
--- src/main/java/org/owasp/esapi/reference/crypto/ReferenceEncryptedProperties.java	(revision 1961)
+++ src/main/java/org/owasp/esapi/reference/crypto/ReferenceEncryptedProperties.java	(working copy)
@@ -29,7 +29,7 @@
 
 import org.owasp.esapi.ESAPI;
 import org.owasp.esapi.EncryptedProperties;
-import org.owasp.esapi.Logger;
+import org.slf4j.Logger;
 import org.owasp.esapi.crypto.CipherText;
 import org.owasp.esapi.crypto.PlainText;
 import org.owasp.esapi.errors.EncryptionRuntimeException;
@@ -176,7 +176,7 @@
 	@Override
 	public void load(InputStream in) throws IOException {
 		super.load(in);
-		logger.trace(Logger.SECURITY_SUCCESS, "Encrypted properties loaded successfully");
+		logger.trace(ESAPI.getSecuritySuccessMarker(), "Encrypted properties loaded successfully");
 	}
 
 	/**
@@ -207,7 +207,7 @@
 		InputStream is = new ByteArrayInputStream(contents.toString().getBytes());
 
 		super.load(is);
-		logger.trace(Logger.SECURITY_SUCCESS, "Encrypted properties loaded successfully");
+		logger.trace(ESAPI.getSecuritySuccessMarker(), "Encrypted properties loaded successfully");
 	}
 
 	/**
Index: src/main/java/org/owasp/esapi/reference/validation/HTMLValidationRule.java
===================================================================
--- src/main/java/org/owasp/esapi/reference/validation/HTMLValidationRule.java	(revision 1961)
+++ src/main/java/org/owasp/esapi/reference/validation/HTMLValidationRule.java	(working copy)
@@ -22,7 +22,7 @@
 import org.owasp.esapi.errors.ConfigurationException;
 import org.owasp.esapi.ESAPI;
 import org.owasp.esapi.Encoder;
-import org.owasp.esapi.Logger;
+import org.slf4j.Logger;
 import org.owasp.esapi.StringUtilities;
 import org.owasp.esapi.errors.ValidationException;
 import org.owasp.validator.html.AntiSamy;
@@ -114,7 +114,7 @@
 			
 			List<String> errors = test.getErrorMessages();
 			if ( !errors.isEmpty() ) {
-				LOGGER.info( Logger.SECURITY_FAILURE, "Cleaned up invalid HTML input: " + errors );
+				LOGGER.info( ESAPI.getSecurityFailureMarker(), "Cleaned up invalid HTML input: " + errors );
 			}
 			
 			return test.getCleanHTML().trim();
Index: src/main/java/org/owasp/esapi/waf/ESAPIWebApplicationFirewallFilter.java
===================================================================
--- src/main/java/org/owasp/esapi/waf/ESAPIWebApplicationFirewallFilter.java	(revision 1961)
+++ src/main/java/org/owasp/esapi/waf/ESAPIWebApplicationFirewallFilter.java	(working copy)
@@ -16,7 +16,6 @@
 package org.owasp.esapi.waf;
 
 import java.io.File;
-
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
 import java.io.IOException;
@@ -32,9 +31,7 @@
 import javax.servlet.http.HttpServletResponse;
 
 import org.apache.commons.fileupload.FileUploadException;
-import org.apache.log4j.xml.DOMConfigurator;
 import org.owasp.esapi.ESAPI;
-import org.owasp.esapi.Logger;
 import org.owasp.esapi.waf.actions.Action;
 import org.owasp.esapi.waf.actions.BlockAction;
 import org.owasp.esapi.waf.actions.DefaultAction;
@@ -44,6 +41,7 @@
 import org.owasp.esapi.waf.internal.InterceptingHTTPServletRequest;
 import org.owasp.esapi.waf.internal.InterceptingHTTPServletResponse;
 import org.owasp.esapi.waf.rules.Rule;
+import org.slf4j.Logger;
 
 /**
  * This is the main class for the ESAPI Web Application Firewall (WAF). It is a standard J2EE servlet filter
@@ -117,7 +115,7 @@
 		 */
 		this.fc = fc;
 		
-		logger.debug(Logger.EVENT_SUCCESS, ">> Initializing WAF" );
+		logger.debug(ESAPI.getEventsuccessMarker(), ">> Initializing WAF" );
 		/*
 		 * Pull logging file.
 		 */
@@ -158,15 +156,16 @@
 		
 		/*
 		 * Open up configuration file and populate the AppGuardian configuration object.
-		 */
+		 
 
 		try {
 
 			String webRootDir = fc.getServletContext().getRealPath("/");
 			appGuardConfig = ConfigurationParser.readConfigurationFile(new FileInputStream(configurationFilename),webRootDir);
-
-			DOMConfigurator.configure(realLogSettingsFilename);
-
+			Configurat
+			ConfigurationSource source = new ConfigurationSource(new FileInputStream(realLogSettingsFilename));
+			XmlConfigurationFactory.getInstance().getConfiguration(source);
+			ConfigurationBuilderFactory.newConfigurationBuilder().build();
 			lastConfigReadTime = System.currentTimeMillis();
 			
 		} catch (FileNotFoundException e) {
@@ -173,8 +172,10 @@
 			throw new ServletException(e);
 		} catch (ConfigurationException e) {
 			throw new ServletException(e);
+		} catch (IOException e) {
+			throw new ServletException(e);
 		}
-
+*/
 	}
 
 
@@ -200,12 +201,12 @@
 				 * The file has been altered since it was
 				 * read in the last time. Must re-read it.
 				 */
-				logger.debug(Logger.EVENT_SUCCESS, ">> Re-reading WAF policy");
+				logger.debug(ESAPI.getEventsuccessMarker(), ">> Re-reading WAF policy");
 				init(fc);
 			}
 		}
 		
-		logger.debug(Logger.EVENT_SUCCESS, ">>In WAF doFilter");
+		logger.debug(ESAPI.getEventsuccessMarker(), ">>In WAF doFilter");
 
 		HttpServletRequest httpRequest = (HttpServletRequest)servletRequest;
 		HttpServletResponse httpResponse = (HttpServletResponse)servletResponse;
@@ -225,7 +226,7 @@
 		 * 3rd argument = cookie rules because thats where they mostly get acted on
 		 */
 		
-		if ( 	appGuardConfig.getCookieRules().size() + 
+		if (appGuardConfig.getCookieRules().size() + 
 				appGuardConfig.getBeforeResponseRules().size() > 0) {
 			response = new InterceptingHTTPServletResponse(httpResponse, true, appGuardConfig.getCookieRules());
 		}
@@ -233,7 +234,7 @@
 		/*
 		 * Stage 1: Rules that do not need the request body.
 		 */
-		logger.debug(Logger.EVENT_SUCCESS, ">> Starting stage 1" );
+		logger.debug(ESAPI.getEventsuccessMarker(), ">> Starting stage 1" );
 
 		List<Rule> rules = this.appGuardConfig.getBeforeBodyRules();
 
@@ -240,7 +241,7 @@
 		for(int i=0;i<rules.size();i++) {
 
 			Rule rule = rules.get(i);
-			logger.debug(Logger.EVENT_SUCCESS,  "  Applying BEFORE rule:  " + rule.getClass().getName() );
+			logger.debug(ESAPI.getEventsuccessMarker(),  "  Applying BEFORE rule:  " + rule.getClass().getName() );
 			
 			/*
 			 * The rules execute in check(). The check() method will also log. All we have
@@ -288,13 +289,13 @@
 		try {
 			request = new InterceptingHTTPServletRequest((HttpServletRequest)servletRequest);
 		} catch (FileUploadException fue) {
-			logger.error(Logger.EVENT_SUCCESS,  "Error Wrapping Request", fue );
+			logger.error(ESAPI.getEventsuccessMarker(),  "Error Wrapping Request", fue );
 		}
 
 		/*
 		 * Stage 2: After the body has been read, but before the the application has gotten it.
 		 */
-		logger.debug(Logger.EVENT_SUCCESS, ">> Starting Stage 2" );
+		logger.debug(ESAPI.getEventsuccessMarker(), ">> Starting Stage 2" );
 
 		rules = this.appGuardConfig.getAfterBodyRules();
 
@@ -301,7 +302,7 @@
 		for(int i=0;i<rules.size();i++) {
 
 			Rule rule = rules.get(i);
-			logger.debug(Logger.EVENT_SUCCESS,  "  Applying BEFORE CHAIN rule:  " + rule.getClass().getName() );
+			logger.debug(ESAPI.getEventsuccessMarker(),  "  Applying BEFORE CHAIN rule:  " + rule.getClass().getName() );
 
 			/*
 			 * The rules execute in check(). The check() method will take care of logging. 
@@ -345,13 +346,13 @@
 		/*
 		 * In between stages 2 and 3 is the application's processing of the input.
 		 */
-		logger.debug(Logger.EVENT_SUCCESS, ">> Calling the FilterChain: " + chain );
+		logger.debug(ESAPI.getEventsuccessMarker(), ">> Calling the FilterChain: " + chain );
 		chain.doFilter(request, response != null ? response : httpResponse);
 
 		/*
 		 * Stage 3: Before the response has been sent back to the user.
 		 */
-		logger.debug(Logger.EVENT_SUCCESS, ">> Starting Stage 3" );
+		logger.debug(ESAPI.getEventsuccessMarker(), ">> Starting Stage 3" );
 
 		rules = this.appGuardConfig.getBeforeResponseRules();
 
@@ -358,7 +359,7 @@
 		for(int i=0;i<rules.size();i++) {
 
 			Rule rule = rules.get(i);
-			logger.debug(Logger.EVENT_SUCCESS,  "  Applying AFTER CHAIN rule:  " + rule.getClass().getName() );
+			logger.debug(ESAPI.getEventsuccessMarker(),  "  Applying AFTER CHAIN rule:  " + rule.getClass().getName() );
 
 			/*
 			 * The rules execute in check(). The check() method will also log. All we have
@@ -405,7 +406,7 @@
 		 */
 		
 		if ( response != null ) {
-			logger.debug(Logger.EVENT_SUCCESS, ">>> committing reponse" );
+			logger.debug(ESAPI.getEventsuccessMarker(), ">>> committing reponse" );
 			response.commit();
 		}
 	}
Index: src/main/java/org/owasp/esapi/waf/configuration/AppGuardianConfiguration.java
===================================================================
--- src/main/java/org/owasp/esapi/waf/configuration/AppGuardianConfiguration.java	(revision 1961)
+++ src/main/java/org/owasp/esapi/waf/configuration/AppGuardianConfiguration.java	(working copy)
@@ -18,8 +18,8 @@
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
+import java.util.logging.Level;
 
-import org.apache.log4j.Level;
 import org.owasp.esapi.waf.rules.Rule;
 
 /**
Index: src/main/java/org/owasp/esapi/waf/configuration/ConfigurationParser.java
===================================================================
--- src/main/java/org/owasp/esapi/waf/configuration/ConfigurationParser.java	(revision 1961)
+++ src/main/java/org/owasp/esapi/waf/configuration/ConfigurationParser.java	(working copy)
@@ -17,10 +17,10 @@
 
 import java.io.FileNotFoundException;
 import java.io.IOException;
-
 import java.io.InputStream;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.logging.Level;
 import java.util.regex.Pattern;
 
 import nu.xom.Builder;
@@ -30,7 +30,6 @@
 import nu.xom.ParsingException;
 import nu.xom.ValidityException;
 
-import org.apache.log4j.Level;
 import org.owasp.esapi.ESAPI;
 import org.owasp.esapi.waf.ConfigurationException;
 import org.owasp.esapi.waf.rules.AddHTTPOnlyFlagRule;
@@ -170,7 +169,7 @@
 			Element loggingRoot = settingsRoot.getFirstChildElement("logging");
 			if ( loggingRoot != null ) {
 				config.setLogDirectory(loggingRoot.getFirstChildElement("log-directory").getValue());
-				config.setLogLevel(Level.toLevel(loggingRoot.getFirstChildElement("log-level").getValue()));
+				config.setLogLevel(Level.parse((loggingRoot.getFirstChildElement("log-level").getValue())));
 			}
 			
 			/**
Index: src/main/java/org/owasp/esapi/waf/rules/ReplaceContentRule.java
===================================================================
--- src/main/java/org/owasp/esapi/waf/rules/ReplaceContentRule.java	(revision 1961)
+++ src/main/java/org/owasp/esapi/waf/rules/ReplaceContentRule.java	(working copy)
@@ -23,7 +23,8 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import org.owasp.esapi.Logger;
+import org.slf4j.Logger;
+import org.owasp.esapi.ESAPI;
 import org.owasp.esapi.waf.actions.Action;
 import org.owasp.esapi.waf.actions.DoNothingAction;
 import org.owasp.esapi.waf.configuration.AppGuardianConfiguration;
@@ -96,15 +97,15 @@
 				
 				if ( ! s.equals(canary) ) {
 					response.getInterceptingServletOutputStream().setResponseBytes(canary.getBytes(response.getCharacterEncoding()));
-					logger.debug(Logger.SECURITY_SUCCESS, "Successfully replaced pattern '" + pattern.pattern() + "' on response to URL '" + request.getRequestURL() + "'");
+					logger.debug(ESAPI.getSecuritySuccessMarker(), "Successfully replaced pattern '" + pattern.pattern() + "' on response to URL '" + request.getRequestURL() + "'");
 				}
 				
 			} catch (IOException ioe) {
-				logger.error(Logger.SECURITY_FAILURE, "Failed to replace pattern '" + pattern.pattern() + "' on response to URL '" + request.getRequestURL() + "' due to [" + ioe.getMessage() + "]");
+				logger.error(ESAPI.getSecurityFailureMarker(), "Failed to replace pattern '" + pattern.pattern() + "' on response to URL '" + request.getRequestURL() + "' due to [" + ioe.getMessage() + "]");
 			}
 
 		} catch(UnsupportedEncodingException uee) {
-			logger.error(Logger.SECURITY_FAILURE, "Failed to replace pattern '" + pattern.pattern() + "' on response to URL '" + request.getRequestURL() + "' due to [" + uee.getMessage() + "]");
+			logger.error(ESAPI.getSecurityFailureMarker(), "Failed to replace pattern '" + pattern.pattern() + "' on response to URL '" + request.getRequestURL() + "' due to [" + uee.getMessage() + "]");
 		}
 
 		return new DoNothingAction();
Index: src/main/java/org/owasp/esapi/waf/rules/Rule.java
===================================================================
--- src/main/java/org/owasp/esapi/waf/rules/Rule.java	(revision 1961)
+++ src/main/java/org/owasp/esapi/waf/rules/Rule.java	(working copy)
@@ -20,7 +20,7 @@
 import javax.servlet.http.HttpServletResponse;
 
 import org.owasp.esapi.ESAPI;
-import org.owasp.esapi.Logger;
+import org.slf4j.Logger;
 import org.owasp.esapi.waf.actions.Action;
 import org.owasp.esapi.waf.configuration.AppGuardianConfiguration;
 import org.owasp.esapi.waf.internal.InterceptingHTTPServletResponse;
@@ -38,7 +38,7 @@
 	public abstract Action check( HttpServletRequest request, InterceptingHTTPServletResponse response, HttpServletResponse httpResponse );
 
 	public void log( HttpServletRequest request, String message ) {
-		logger.warning(Logger.SECURITY_FAILURE,"[IP=" + request.getRemoteAddr() +
+		logger.warn(ESAPI.getSecurityFailureMarker(),"[IP=" + request.getRemoteAddr() +
 				",Rule=" + this.getClass().getSimpleName() + ",ID="+id+"] " + message);
 	}
 
Index: src/test/java/org/owasp/esapi/http/MockServletContext.java
===================================================================
--- src/test/java/org/owasp/esapi/http/MockServletContext.java	(revision 1961)
+++ src/test/java/org/owasp/esapi/http/MockServletContext.java	(working copy)
@@ -28,7 +28,7 @@
 import javax.servlet.ServletException;
 
 import org.owasp.esapi.ESAPI;
-import org.owasp.esapi.Logger;
+import org.slf4j.Logger;
 
 /**
  * Defines a set of methods that a servlet uses to communicate with its
@@ -343,7 +343,7 @@
      * message to be written to the log file
      */
     public void log(String msg) {
-    	ESAPI.getLogger( "MockServletContext" ).warning( Logger.EVENT_FAILURE, msg );
+    	ESAPI.getLogger( "MockServletContext" ).warn( ESAPI.getEventFailureMarker(), msg );
     }
 
     /**
@@ -356,7 +356,7 @@
      * to the servlet log file.
      */
     public void log(Exception exception, String msg) {
-    	ESAPI.getLogger( "MockServletContext" ).warning( Logger.EVENT_FAILURE, msg, exception );
+    	ESAPI.getLogger( "MockServletContext" ).warn( ESAPI.getEventFailureMarker(), msg, exception );
     }
 
     /**
@@ -372,7 +372,7 @@
      * or exception
      */
     public void log(String message, Throwable throwable) {
-    	ESAPI.getLogger( "MockServletContext" ).warning( Logger.EVENT_FAILURE, message, throwable );
+    	ESAPI.getLogger( "MockServletContext" ).warn( ESAPI.getEventFailureMarker(), message, throwable );
     }
 
     /**
Index: src/test/java/org/owasp/esapi/reference/AuthenticatorTest.java
===================================================================
--- src/test/java/org/owasp/esapi/reference/AuthenticatorTest.java	(revision 1961)
+++ src/test/java/org/owasp/esapi/reference/AuthenticatorTest.java	(working copy)
@@ -26,7 +26,6 @@
 import org.owasp.esapi.ESAPI;
 import org.owasp.esapi.EncoderConstants;
 import org.owasp.esapi.HTTPUtilities;
-import org.owasp.esapi.Logger;
 import org.owasp.esapi.User;
 import org.owasp.esapi.errors.AuthenticationException;
 import org.owasp.esapi.errors.EncryptionException;
@@ -422,7 +421,7 @@
 					String password = ESAPI.randomizer().getRandomString(8, EncoderConstants.CHAR_ALPHANUMERICS);
 					u = instance.createUser("test" + count++, password, password);
 					instance.setCurrentUser(u);
-					ESAPI.getLogger("test").info( Logger.SECURITY_SUCCESS, "Got current user" );
+					ESAPI.getLogger("test").info( ESAPI.getSecuritySuccessMarker(), "Got current user" );
 					// ESAPI.authenticator().removeUser( u.getAccountName() );
 				} catch (AuthenticationException e) {
 					e.printStackTrace();
Index: src/test/java/org/owasp/esapi/reference/DefaultSecurityConfigurationTest.java
===================================================================
--- src/test/java/org/owasp/esapi/reference/DefaultSecurityConfigurationTest.java	(revision 1961)
+++ src/test/java/org/owasp/esapi/reference/DefaultSecurityConfigurationTest.java	(working copy)
@@ -6,7 +6,7 @@
 
 import org.junit.Test;
 import org.owasp.esapi.ESAPI;
-import org.owasp.esapi.Logger;
+import org.slf4j.Logger;
 import org.owasp.esapi.errors.ConfigurationException;
 
 public class DefaultSecurityConfigurationTest {
@@ -346,30 +346,6 @@
 	}
 	
 	@Test
-	public void testGetLogLevel() {
-		DefaultSecurityConfiguration secConf = new DefaultSecurityConfiguration(new java.util.Properties());
-		Assert.assertEquals(Logger.WARNING, secConf.getLogLevel());
-		
-		secConf = this.createWithProperty(DefaultSecurityConfiguration.LOG_LEVEL, "trace");
-		Assert.assertEquals(Logger.TRACE, secConf.getLogLevel());
-		
-		secConf = this.createWithProperty(DefaultSecurityConfiguration.LOG_LEVEL, "Off");
-		Assert.assertEquals(Logger.OFF, secConf.getLogLevel());
-		
-		secConf = this.createWithProperty(DefaultSecurityConfiguration.LOG_LEVEL, "all");
-		Assert.assertEquals(Logger.ALL, secConf.getLogLevel());
-		
-		secConf = this.createWithProperty(DefaultSecurityConfiguration.LOG_LEVEL, "DEBUG");
-		Assert.assertEquals(Logger.DEBUG, secConf.getLogLevel());
-		
-		secConf = this.createWithProperty(DefaultSecurityConfiguration.LOG_LEVEL, "info");
-		Assert.assertEquals(Logger.INFO, secConf.getLogLevel());
-		
-		secConf = this.createWithProperty(DefaultSecurityConfiguration.LOG_LEVEL, "ERROR");
-		Assert.assertEquals(Logger.ERROR, secConf.getLogLevel());
-	}
-	
-	@Test
 	public void testGetLogFileName() {
 		DefaultSecurityConfiguration secConf = new DefaultSecurityConfiguration(new java.util.Properties());
 		Assert.assertEquals("ESAPI_logging_file", secConf.getLogFileName());
Index: src/test/java/org/owasp/esapi/reference/JavaLoggerTest.java
===================================================================
--- src/test/java/org/owasp/esapi/reference/JavaLoggerTest.java	(revision 1961)
+++ src/test/java/org/owasp/esapi/reference/JavaLoggerTest.java	(working copy)
@@ -1,282 +0,0 @@
-/**
- * OWASP Enterprise Security API (ESAPI)
- * 
- * This file is part of the Open Web Application Security Project (OWASP)
- * Enterprise Security API (ESAPI) project. For details, please see
- * <a href="http://www.owasp.org/index.php/ESAPI">http://www.owasp.org/index.php/ESAPI</a>.
- *
- * Copyright (c) 2007 - The OWASP Foundation
- * 
- * The ESAPI is published by OWASP under the BSD license. You should read and accept the
- * LICENSE before you use, modify, and/or redistribute this software.
- * 
- * @author Jeff Williams <a href="http://www.aspectsecurity.com">Aspect Security</a>
- * @created 2007
- */
-package org.owasp.esapi.reference;
-
-import java.io.IOException;
-import java.util.Arrays;
-
-import junit.framework.Test;
-import junit.framework.TestCase;
-import junit.framework.TestSuite;
-
-import org.owasp.esapi.ESAPI;
-import org.owasp.esapi.Logger;
-import org.owasp.esapi.errors.AuthenticationException;
-import org.owasp.esapi.errors.ValidationException;
-import org.owasp.esapi.http.MockHttpServletRequest;
-import org.owasp.esapi.http.MockHttpServletResponse;
-
-/**
- * The Class LoggerTest.
- * 
- * @author Jeff Williams (jeff.williams@aspectsecurity.com)
- */
-public class JavaLoggerTest extends TestCase {
-
-	private static int testCount = 0;
-	
-	private static Logger testLogger = null;
-
-	
-    /**
-	 * Instantiates a new logger test.
-	 * 
-	 * @param testName the test name
-	 */
-    public JavaLoggerTest(String testName) {
-        super(testName);
-    }
-
-    /**
-     * {@inheritDoc}
-     * @throws Exception
-     */
-    protected void setUp() throws Exception {
-        UnitTestSecurityConfiguration tmpConfig = new UnitTestSecurityConfiguration((DefaultSecurityConfiguration) ESAPI.securityConfiguration());
-        tmpConfig.setLogImplementation( JavaLogFactory.class.getName() );
-        ESAPI.override(tmpConfig);
-    	//This ensures a clean logger between tests
-    	testLogger = ESAPI.getLogger( "test" + testCount++ );
-    	System.out.println("Test logger: " + testLogger);
-    }
-
-    /**
-     * {@inheritDoc}
-     * @throws Exception
-     */
-    protected void tearDown() throws Exception {
-    	//this helps, with garbage collection
-    	testLogger = null;
-        ESAPI.override(null);
-    }
-
-    /**
-	 * Suite.
-	 * 
-	 * @return the test
-	 */
-    public static Test suite() {
-        TestSuite suite = new TestSuite(JavaLoggerTest.class);    
-        return suite;
-    }
-    
-    /**
-     * Test of logHTTPRequest method, of class org.owasp.esapi.Logger.
-     * 
-     * @throws ValidationException
-     *             the validation exception
-     * @throws IOException
-     *             Signals that an I/O exception has occurred.
-     * @throws AuthenticationException
-     *             the authentication exception
-     */
-    public void testLogHTTPRequest() throws ValidationException, IOException, AuthenticationException {
-        System.out.println("logHTTPRequest");
-        String[] ignore = {"password","ssn","ccn"};
-        MockHttpServletRequest request = new MockHttpServletRequest();
-        MockHttpServletResponse response = new MockHttpServletResponse();
-        ESAPI.httpUtilities().setCurrentHTTP(request, response);
-        Logger logger = ESAPI.getLogger("logger");
-        ESAPI.httpUtilities().logHTTPRequest( request, logger, Arrays.asList(ignore) );
-        request.addParameter("one","one");
-        request.addParameter("two","two1");
-        request.addParameter("two","two2");
-        request.addParameter("password","jwilliams");
-        ESAPI.httpUtilities().logHTTPRequest( request, logger, Arrays.asList(ignore) );
-    }    
-    
-    
-    /**
-     * Test of setLevel method of the inner class org.owasp.esapi.reference.JavaLogger that is defined in 
-     * org.owasp.esapi.reference.JavaLogFactory.
-     */
-    public void testSetLevel() {
-        System.out.println("setLevel");
-        
-        // The following tests that the default logging level is set to WARNING. Since the default might be changed
-        // in the ESAPI security configuration file, these are commented out.
-//       	assertTrue(testLogger.isWarningEnabled());
-//       	assertFalse(testLogger.isInfoEnabled());
-
-        // First, test all the different logging levels
-        testLogger.setLevel( Logger.ALL );
-    	assertTrue(testLogger.isFatalEnabled());
-       	assertTrue(testLogger.isErrorEnabled());
-       	assertTrue(testLogger.isWarningEnabled());
-       	assertTrue(testLogger.isInfoEnabled());
-       	assertTrue(testLogger.isDebugEnabled());
-       	assertTrue(testLogger.isTraceEnabled());
-
-       	testLogger.setLevel( Logger.TRACE );
-    	assertTrue(testLogger.isFatalEnabled());
-       	assertTrue(testLogger.isErrorEnabled());
-       	assertTrue(testLogger.isWarningEnabled());
-       	assertTrue(testLogger.isInfoEnabled());
-       	assertTrue(testLogger.isDebugEnabled());
-       	assertTrue(testLogger.isTraceEnabled());
-
-       	testLogger.setLevel( Logger.DEBUG );
-    	assertTrue(testLogger.isFatalEnabled());
-       	assertTrue(testLogger.isErrorEnabled());
-       	assertTrue(testLogger.isWarningEnabled());
-       	assertTrue(testLogger.isInfoEnabled());
-       	assertTrue(testLogger.isDebugEnabled());
-       	assertFalse(testLogger.isTraceEnabled());
-       	
-       	testLogger.setLevel( Logger.INFO );
-    	assertTrue(testLogger.isFatalEnabled());
-       	assertTrue(testLogger.isErrorEnabled());
-       	assertTrue(testLogger.isWarningEnabled());
-       	assertTrue(testLogger.isInfoEnabled());
-       	assertFalse(testLogger.isDebugEnabled());
-       	assertFalse(testLogger.isTraceEnabled());
-       	
-       	testLogger.setLevel( Logger.WARNING );
-    	assertTrue(testLogger.isFatalEnabled());
-       	assertTrue(testLogger.isErrorEnabled());
-       	assertTrue(testLogger.isWarningEnabled());
-       	assertFalse(testLogger.isInfoEnabled());
-       	assertFalse(testLogger.isDebugEnabled());
-       	assertFalse(testLogger.isTraceEnabled());
-       	
-       	testLogger.setLevel( Logger.ERROR );
-    	assertTrue(testLogger.isFatalEnabled());
-       	assertTrue(testLogger.isErrorEnabled());
-       	assertFalse(testLogger.isWarningEnabled());
-       	assertFalse(testLogger.isInfoEnabled());
-       	assertFalse(testLogger.isDebugEnabled());
-       	assertFalse(testLogger.isTraceEnabled());
-       	
-       	testLogger.setLevel( Logger.FATAL );
-    	assertTrue(testLogger.isFatalEnabled());
-       	assertFalse(testLogger.isErrorEnabled());
-       	assertFalse(testLogger.isWarningEnabled());
-       	assertFalse(testLogger.isInfoEnabled());
-       	assertFalse(testLogger.isDebugEnabled());
-       	assertFalse(testLogger.isTraceEnabled());
-       	
-       	testLogger.setLevel( Logger.OFF );
-    	assertFalse(testLogger.isFatalEnabled());
-       	assertFalse(testLogger.isErrorEnabled());
-       	assertFalse(testLogger.isWarningEnabled());
-       	assertFalse(testLogger.isInfoEnabled());
-       	assertFalse(testLogger.isDebugEnabled());
-       	assertFalse(testLogger.isTraceEnabled());
-       	
-       	//Now test to see if a change to the logging level in one log affects other logs
-       	Logger newLogger = ESAPI.getLogger( "test_num2" );
-       	testLogger.setLevel( Logger.OFF );
-       	newLogger.setLevel( Logger.INFO );
-    	assertFalse(testLogger.isFatalEnabled());
-       	assertFalse(testLogger.isErrorEnabled());
-       	assertFalse(testLogger.isWarningEnabled());
-       	assertFalse(testLogger.isInfoEnabled());
-       	assertFalse(testLogger.isDebugEnabled());
-       	assertFalse(testLogger.isTraceEnabled());
-       	
-       	assertTrue(newLogger.isFatalEnabled());
-       	assertTrue(newLogger.isErrorEnabled());
-       	assertTrue(newLogger.isWarningEnabled());
-       	assertTrue(newLogger.isInfoEnabled());
-       	assertFalse(newLogger.isDebugEnabled());
-       	assertFalse(newLogger.isTraceEnabled());
-    }
-
-    
-    /**
-	 * Test of info method, of class org.owasp.esapi.Logger.
-	 */
-    public void testInfo() {
-        System.out.println("info");
-        testLogger.info(Logger.SECURITY_SUCCESS, "test message" );
-        testLogger.info(Logger.SECURITY_SUCCESS, "test message", null );
-        testLogger.info(Logger.SECURITY_SUCCESS, "%3escript%3f test message", null );
-        testLogger.info(Logger.SECURITY_SUCCESS, "<script> test message", null );
-    }
-
-    /**
-	 * Test of trace method, of class org.owasp.esapi.Logger.
-	 */
-    public void testTrace() {
-        System.out.println("trace");
-        testLogger.trace(Logger.SECURITY_SUCCESS, "test message trace" );
-        testLogger.trace(Logger.SECURITY_SUCCESS, "test message trace", null );
-    }
-
-    /**
-	 * Test of debug method, of class org.owasp.esapi.Logger.
-	 */
-    public void testDebug() {
-        System.out.println("debug");
-        testLogger.debug(Logger.SECURITY_SUCCESS, "test message debug" );
-        testLogger.debug(Logger.SECURITY_SUCCESS, "test message debug", null );
-    }
-
-    /**
-	 * Test of error method, of class org.owasp.esapi.Logger.
-	 */
-    public void testError() {
-        System.out.println("error");
-        testLogger.error(Logger.SECURITY_SUCCESS, "test message error" );
-        testLogger.error(Logger.SECURITY_SUCCESS, "test message error", null );
-    }
-
-    /**
-	 * Test of warning method, of class org.owasp.esapi.Logger.
-	 */
-    public void testWarning() {
-        System.out.println("warning");
-        testLogger.warning(Logger.SECURITY_SUCCESS, "test message warning" );
-        testLogger.warning(Logger.SECURITY_SUCCESS, "test message warning", null );
-    }
-
-    /**
-	 * Test of fatal method, of class org.owasp.esapi.Logger.
-	 */
-    public void testFatal() {
-        System.out.println("fatal");
-        testLogger.fatal(Logger.SECURITY_SUCCESS, "test message fatal" );
-        testLogger.fatal(Logger.SECURITY_SUCCESS, "test message fatal", null );
-    }
-    
-    /**
-     * Test of always method, of class org.owasp.esapi.Logger.
-     */
-    public void testAlways() {
-
-        System.out.println("always");
-        testLogger.always(Logger.SECURITY_SUCCESS, "test message always 1 (SECURITY_SUCCESS)" );
-        testLogger.always(Logger.SECURITY_AUDIT,   "test message always 2 (SECURITY_AUDIT)" );
-        testLogger.always(Logger.SECURITY_SUCCESS, "test message always 3 (SECURITY_SUCCESS)", null );
-        testLogger.always(Logger.SECURITY_AUDIT,   "test message always 4 (SECURITY_AUDIT)", null );
-        try {
-        	throw new RuntimeException("What? You call that a 'throw'? My grandmother throws " +
-        							   "better than that and she's been dead for more than 10 years!");
-        } catch(RuntimeException rtex) {
-            testLogger.always(Logger.SECURITY_AUDIT,   "test message always 5", rtex );
-        }
-	}
-}
Index: src/test/java/org/owasp/esapi/reference/Log4JLoggerTest.java
===================================================================
--- src/test/java/org/owasp/esapi/reference/Log4JLoggerTest.java	(revision 1961)
+++ src/test/java/org/owasp/esapi/reference/Log4JLoggerTest.java	(working copy)
@@ -1,463 +0,0 @@
-/**
- * OWASP Enterprise Security API (ESAPI)
- * 
- * This file is part of the Open Web Application Security Project (OWASP)
- * Enterprise Security API (ESAPI) project. For details, please see
- * <a href="http://www.owasp.org/index.php/ESAPI">http://www.owasp.org/index.php/ESAPI</a>.
- *
- * Copyright (c) 2007 - The OWASP Foundation
- * 
- * The ESAPI is published by OWASP under the BSD license. You should read and accept the
- * LICENSE before you use, modify, and/or redistribute this software.
- * 
- * @author Jeff Williams <a href="http://www.aspectsecurity.com">Aspect Security</a>
- * @created 2007
- */
-package org.owasp.esapi.reference;
-
-import java.io.IOException;
-import java.util.Arrays;
-
-import junit.framework.Test;
-import junit.framework.TestCase;
-import junit.framework.TestSuite;
-
-import org.owasp.esapi.ESAPI;
-import org.owasp.esapi.Logger;
-import org.owasp.esapi.errors.AuthenticationException;
-import org.owasp.esapi.errors.ValidationException;
-import org.owasp.esapi.http.MockHttpServletRequest;
-import org.owasp.esapi.http.MockHttpServletResponse;
-
-/**
- * The Class LoggerTest.
- * 
- * @author Jeff Williams (jeff.williams@aspectsecurity.com)
- * @author August Detlefsen (augustd at codemagi dot com) <a href="http://www.codemagi.com">CodeMagi, Inc.</a>
- */
-public class Log4JLoggerTest extends TestCase {
-	private static int testCount = 0;
-	
-	private static Logger testLogger = null;
-
-	//a logger for explicit tests of log4j logging methods
-	private static Log4JLogger log4JLogger = null;
-
-    /**
-	 * Instantiates a new logger test.
-	 * 
-	 * @param testName the test name
-	 */
-    public Log4JLoggerTest(String testName) {
-        super(testName);
-    }
-
-    /**
-     * {@inheritDoc}
-     * @throws Exception
-     */
-    protected void setUp() throws Exception {
-		//override default log configuration in ESAPI.properties to use Log4JLogFactory
-        UnitTestSecurityConfiguration tmpConfig = new UnitTestSecurityConfiguration((DefaultSecurityConfiguration) ESAPI.securityConfiguration());
-        tmpConfig.setLogImplementation( Log4JLogFactory.class.getName() );
-        ESAPI.override(tmpConfig);
-
-    	//This ensures a clean logger between tests
-    	testLogger = ESAPI.getLogger( "test ExampleExtendedLog4JLogFactory: " + testCount++ );
-    	System.out.println("Test ExampleExtendedLog4JLogFactory logger: " + testLogger);
-
-		//declare this one as Log4JLogger to be able to use Log4J logging methods
-		log4JLogger = (Log4JLogger)ESAPI.getLogger( "test Log4JLogFactory: " + testCount);
-		System.out.println("Test Log4JLogFactory logger: " + log4JLogger);
-
-    }
-
-    /**
-     * {@inheritDoc}
-     * @throws Exception
-     */
-    protected void tearDown() throws Exception {
-    	//this helps, with garbage collection
-    	testLogger = null;
-		log4JLogger = null;
-
-		ESAPI.override(null);
-	}
-
-    /**
-	 * Suite.
-	 * 
-	 * @return the test
-	 */
-    public static Test suite() {
-        TestSuite suite = new TestSuite(Log4JLoggerTest.class);    
-        return suite;
-    }
-    
-    /**
-     * Test of logHTTPRequest method, of class org.owasp.esapi.Logger.
-     * 
-     * @throws ValidationException
-     *             the validation exception
-     * @throws IOException
-     *             Signals that an I/O exception has occurred.
-     * @throws AuthenticationException
-     *             the authentication exception
-     */
-    public void testLogHTTPRequest() throws ValidationException, IOException, AuthenticationException {
-        System.out.println("logHTTPRequest");
-        String[] ignore = {"password","ssn","ccn"};
-        MockHttpServletRequest request = new MockHttpServletRequest();
-        MockHttpServletResponse response = new MockHttpServletResponse();
-        ESAPI.httpUtilities().setCurrentHTTP(request, response);
-        Logger logger = ESAPI.getLogger("logger");
-        ESAPI.httpUtilities().logHTTPRequest( request, logger, Arrays.asList(ignore) );
-        request.addParameter("one","one");
-        request.addParameter("two","two1");
-        request.addParameter("two","two2");
-        request.addParameter("password","jwilliams");
-        ESAPI.httpUtilities().logHTTPRequest( request, logger, Arrays.asList(ignore) );
-    } 
-    
-    
-    /**
-     * Test of setLevel method of the inner class org.owasp.esapi.reference.JavaLogger that is defined in 
-     * org.owasp.esapi.reference.JavaLogFactory.
-     */
-    public void testSetLevel() {
-        System.out.println("setLevel");
-        
-        // The following tests that the default logging level is set to WARNING. Since the default might be changed
-        // in the ESAPI security configuration file, these are commented out.
-//       	assertTrue(testLogger.isWarningEnabled());
-//       	assertFalse(testLogger.isInfoEnabled());
-
-        // First, test all the different logging levels
-        testLogger.setLevel( Logger.ALL );
-    	assertTrue(testLogger.isFatalEnabled());
-       	assertTrue(testLogger.isErrorEnabled());
-       	assertTrue(testLogger.isWarningEnabled());
-       	assertTrue(testLogger.isInfoEnabled());
-       	assertTrue(testLogger.isDebugEnabled());
-       	assertTrue(testLogger.isTraceEnabled());
-
-       	testLogger.setLevel( Logger.TRACE );
-    	assertTrue(testLogger.isFatalEnabled());
-       	assertTrue(testLogger.isErrorEnabled());
-       	assertTrue(testLogger.isWarningEnabled());
-       	assertTrue(testLogger.isInfoEnabled());
-       	assertTrue(testLogger.isDebugEnabled());
-       	assertTrue(testLogger.isTraceEnabled());
-
-       	testLogger.setLevel( Logger.DEBUG );
-    	assertTrue(testLogger.isFatalEnabled());
-       	assertTrue(testLogger.isErrorEnabled());
-       	assertTrue(testLogger.isWarningEnabled());
-       	assertTrue(testLogger.isInfoEnabled());
-       	assertTrue(testLogger.isDebugEnabled());
-       	assertFalse(testLogger.isTraceEnabled());
-       	
-       	testLogger.setLevel( Logger.INFO );
-    	assertTrue(testLogger.isFatalEnabled());
-       	assertTrue(testLogger.isErrorEnabled());
-       	assertTrue(testLogger.isWarningEnabled());
-       	assertTrue(testLogger.isInfoEnabled());
-       	assertFalse(testLogger.isDebugEnabled());
-       	assertFalse(testLogger.isTraceEnabled());
-       	
-       	testLogger.setLevel( Logger.WARNING );
-    	assertTrue(testLogger.isFatalEnabled());
-       	assertTrue(testLogger.isErrorEnabled());
-       	assertTrue(testLogger.isWarningEnabled());
-       	assertFalse(testLogger.isInfoEnabled());
-       	assertFalse(testLogger.isDebugEnabled());
-       	assertFalse(testLogger.isTraceEnabled());
-       	
-       	testLogger.setLevel( Logger.ERROR );
-    	assertTrue(testLogger.isFatalEnabled());
-       	assertTrue(testLogger.isErrorEnabled());
-       	assertFalse(testLogger.isWarningEnabled());
-       	assertFalse(testLogger.isInfoEnabled());
-       	assertFalse(testLogger.isDebugEnabled());
-       	assertFalse(testLogger.isTraceEnabled());
-       	
-       	testLogger.setLevel( Logger.FATAL );
-    	assertTrue(testLogger.isFatalEnabled());
-       	assertFalse(testLogger.isErrorEnabled());
-       	assertFalse(testLogger.isWarningEnabled());
-       	assertFalse(testLogger.isInfoEnabled());
-       	assertFalse(testLogger.isDebugEnabled());
-       	assertFalse(testLogger.isTraceEnabled());
-       	
-       	testLogger.setLevel( Logger.OFF );
-    	assertFalse(testLogger.isFatalEnabled());
-       	assertFalse(testLogger.isErrorEnabled());
-       	assertFalse(testLogger.isWarningEnabled());
-       	assertFalse(testLogger.isInfoEnabled());
-       	assertFalse(testLogger.isDebugEnabled());
-       	assertFalse(testLogger.isTraceEnabled());
-       	
-       	//Now test to see if a change to the logging level in one log affects other logs
-       	Logger newLogger = ESAPI.getLogger( "test_num2" );
-       	testLogger.setLevel( Logger.OFF );
-       	newLogger.setLevel( Logger.INFO );
-    	assertFalse(testLogger.isFatalEnabled());
-       	assertFalse(testLogger.isErrorEnabled());
-       	assertFalse(testLogger.isWarningEnabled());
-       	assertFalse(testLogger.isInfoEnabled());
-       	assertFalse(testLogger.isDebugEnabled());
-       	assertFalse(testLogger.isTraceEnabled());
-       	
-       	assertTrue(newLogger.isFatalEnabled());
-       	assertTrue(newLogger.isErrorEnabled());
-       	assertTrue(newLogger.isWarningEnabled());
-       	assertTrue(newLogger.isInfoEnabled());
-       	assertFalse(newLogger.isDebugEnabled());
-       	assertFalse(newLogger.isTraceEnabled());
-    }
-
-	/**
-	 * test of loggers without setting explicit log levels
-	 * (log levels set from log4j.xml configuration)
-	 */
-	public void testLogLevels() {
-
-		Logger traceLogger			= ESAPI.getLogger("org.owasp.esapi.reference.TestTrace");
-		Logger debugLogger			= ESAPI.getLogger("org.owasp.esapi.reference.TestDebug");
-		Logger infoLogger			= ESAPI.getLogger("org.owasp.esapi.reference.TestInfo");
-		Logger errorLogger			= ESAPI.getLogger("org.owasp.esapi.reference.TestError");
-		Logger warningLogger		= ESAPI.getLogger("org.owasp.esapi.reference.TestWarning");
-		Logger fatalLogger			= ESAPI.getLogger("org.owasp.esapi.reference.TestFatal");
-		Logger unspecifiedLogger	= ESAPI.getLogger("org.owasp.esapi.reference");  //should use package-wide log level configuration (info)
-
-
-		//traceLogger - all log levels should be enabled
-		assertTrue(traceLogger.isTraceEnabled());
-		assertTrue(traceLogger.isDebugEnabled());
-		assertTrue(traceLogger.isInfoEnabled());
-		assertTrue(traceLogger.isWarningEnabled());
-		assertTrue(traceLogger.isErrorEnabled());
-		assertTrue(traceLogger.isFatalEnabled());
-
-		//debugLogger - all log levels should be enabled EXCEPT trace
-		assertFalse(debugLogger.isTraceEnabled());
-		assertTrue(debugLogger.isDebugEnabled());
-		assertTrue(debugLogger.isInfoEnabled());
-		assertTrue(debugLogger.isWarningEnabled());
-		assertTrue(debugLogger.isErrorEnabled());
-		assertTrue(debugLogger.isFatalEnabled());
-
-		//infoLogger - all log levels should be enabled EXCEPT trace and debug
-		assertFalse(infoLogger.isTraceEnabled());
-		assertFalse(infoLogger.isDebugEnabled());
-		assertTrue(infoLogger.isInfoEnabled());
-		assertTrue(infoLogger.isWarningEnabled());
-		assertTrue(infoLogger.isErrorEnabled());
-		assertTrue(infoLogger.isFatalEnabled());
-
-		//warningLogger - all log levels should be enabled EXCEPT etc.
-		assertFalse(warningLogger.isTraceEnabled());
-		assertFalse(warningLogger.isDebugEnabled());
-		assertFalse(warningLogger.isInfoEnabled());
-		assertTrue(warningLogger.isWarningEnabled());
-		assertTrue(warningLogger.isErrorEnabled());
-		assertTrue(warningLogger.isFatalEnabled());
-
-		//errorLogger - all log levels should be enabled EXCEPT etc.
-		assertFalse(errorLogger.isTraceEnabled());
-		assertFalse(errorLogger.isDebugEnabled());
-		assertFalse(errorLogger.isInfoEnabled());
-		assertFalse(errorLogger.isWarningEnabled());
-		assertTrue(errorLogger.isErrorEnabled());
-		assertTrue(errorLogger.isFatalEnabled());
-
-		//fatalLogger - all log levels should be enabled EXCEPT etc.
-		assertFalse(fatalLogger.isTraceEnabled());
-		assertFalse(fatalLogger.isDebugEnabled());
-		assertFalse(fatalLogger.isInfoEnabled());
-		assertFalse(fatalLogger.isWarningEnabled());
-		assertFalse(fatalLogger.isErrorEnabled());
-		assertTrue(fatalLogger.isFatalEnabled());
-
-		//unspecifiedLogger - all log levels should be enabled EXCEPT trace and debug
-		assertFalse(unspecifiedLogger.isTraceEnabled());
-		assertFalse(unspecifiedLogger.isDebugEnabled());
-		assertTrue(unspecifiedLogger.isInfoEnabled());
-		assertTrue(unspecifiedLogger.isWarningEnabled());
-		assertTrue(unspecifiedLogger.isErrorEnabled());
-		assertTrue(unspecifiedLogger.isFatalEnabled());
-	}
-
-	/**
-	 * test of loggers without setting explicit log levels
-	 * (log levels set from log4j.xml configuration)
-	 */
-	public void testLogLevelsWithClass() {
-
-		Logger traceLogger			= ESAPI.getLogger(TestTrace.class);
-		Logger debugLogger			= ESAPI.getLogger(TestDebug.class);
-		Logger infoLogger			= ESAPI.getLogger(TestInfo.class);
-		Logger errorLogger			= ESAPI.getLogger(TestError.class);
-		Logger warningLogger		= ESAPI.getLogger(TestWarning.class);
-		Logger fatalLogger			= ESAPI.getLogger(TestFatal.class);
-		Logger unspecifiedLogger	= ESAPI.getLogger(TestUnspecified.class);  //should use package-wide log level configuration (info)
-
-		//traceLogger - all log levels should be enabled
-		assertTrue(traceLogger.isTraceEnabled());
-		assertTrue(traceLogger.isDebugEnabled());
-		assertTrue(traceLogger.isInfoEnabled());
-		assertTrue(traceLogger.isWarningEnabled());
-		assertTrue(traceLogger.isErrorEnabled());
-		assertTrue(traceLogger.isFatalEnabled());
-
-		//debugLogger - all log levels should be enabled EXCEPT trace
-		assertFalse(debugLogger.isTraceEnabled());
-		assertTrue(debugLogger.isDebugEnabled());
-		assertTrue(debugLogger.isInfoEnabled());
-		assertTrue(debugLogger.isWarningEnabled());
-		assertTrue(debugLogger.isErrorEnabled());
-		assertTrue(debugLogger.isFatalEnabled());
-
-		//infoLogger - all log levels should be enabled EXCEPT trace and debug
-		assertFalse(infoLogger.isTraceEnabled());
-		assertFalse(infoLogger.isDebugEnabled());
-		assertTrue(infoLogger.isInfoEnabled());
-		assertTrue(infoLogger.isWarningEnabled());
-		assertTrue(infoLogger.isErrorEnabled());
-		assertTrue(infoLogger.isFatalEnabled());
-
-		//warningLogger - all log levels should be enabled EXCEPT etc.
-		assertFalse(warningLogger.isTraceEnabled());
-		assertFalse(warningLogger.isDebugEnabled());
-		assertFalse(warningLogger.isInfoEnabled());
-		assertTrue(warningLogger.isWarningEnabled());
-		assertTrue(warningLogger.isErrorEnabled());
-		assertTrue(warningLogger.isFatalEnabled());
-
-		//errorLogger - all log levels should be enabled EXCEPT etc.
-		assertFalse(errorLogger.isTraceEnabled());
-		assertFalse(errorLogger.isDebugEnabled());
-		assertFalse(errorLogger.isInfoEnabled());
-		assertFalse(errorLogger.isWarningEnabled());
-		assertTrue(errorLogger.isErrorEnabled());
-		assertTrue(errorLogger.isFatalEnabled());
-
-		//fatalLogger - all log levels should be enabled EXCEPT etc.
-		assertFalse(fatalLogger.isTraceEnabled());
-		assertFalse(fatalLogger.isDebugEnabled());
-		assertFalse(fatalLogger.isInfoEnabled());
-		assertFalse(fatalLogger.isWarningEnabled());
-		assertFalse(fatalLogger.isErrorEnabled());
-		assertTrue(fatalLogger.isFatalEnabled());
-
-		//unspecifiedLogger - all log levels should be enabled EXCEPT trace and debug
-		assertFalse(unspecifiedLogger.isTraceEnabled());
-		assertFalse(unspecifiedLogger.isDebugEnabled());
-		assertTrue(unspecifiedLogger.isInfoEnabled());
-		assertTrue(unspecifiedLogger.isWarningEnabled());
-		assertTrue(unspecifiedLogger.isErrorEnabled());
-		assertTrue(unspecifiedLogger.isFatalEnabled());
-	}
-
-    /**
-	 * Test of info method, of class org.owasp.esapi.Logger.
-	 */
-    public void testInfo() {
-        System.out.println("info");
-        testLogger.info(Logger.SECURITY_SUCCESS, "test message" );
-        testLogger.info(Logger.SECURITY_SUCCESS, "test message", null );
-        testLogger.info(Logger.SECURITY_SUCCESS, "%3escript%3f test message", null );
-        testLogger.info(Logger.SECURITY_SUCCESS, "<script> test message", null );
-
-        log4JLogger.info("test message" );
-        log4JLogger.info("test message", null );
-        log4JLogger.info("%3escript%3f test message", null );
-        log4JLogger.info("<script> test message", null );
-
-        log4JLogger.info(Logger.SECURITY_SUCCESS, "test message" );
-        log4JLogger.info(Logger.SECURITY_SUCCESS, "test message", null );
-        log4JLogger.info(Logger.SECURITY_SUCCESS, "%3escript%3f test message", null );
-        log4JLogger.info(Logger.SECURITY_SUCCESS, "<script> test message", null );
-	}
-
-    /**
-	 * Test of trace method, of class org.owasp.esapi.Logger.
-	 */
-    public void testTrace() {
-        System.out.println("trace");
-        testLogger.trace(Logger.SECURITY_SUCCESS, "test message trace" );
-        testLogger.trace(Logger.SECURITY_SUCCESS, "test message trace", null );
-
-        log4JLogger.trace("test message trace" );
-        log4JLogger.trace("test message trace", null );
-	}
-
-    /**
-	 * Test of debug method, of class org.owasp.esapi.Logger.
-	 */
-    public void testDebug() {
-        System.out.println("debug");
-        testLogger.debug(Logger.SECURITY_SUCCESS, "test message debug" );
-        testLogger.debug(Logger.SECURITY_SUCCESS, "test message debug", null );
-
-	    log4JLogger.debug("test message debug" );
-		log4JLogger.debug("test message debug", null );
-	}
-
-    /**
-	 * Test of error method, of class org.owasp.esapi.Logger.
-	 */
-    public void testError() {
-        System.out.println("error");
-        testLogger.error(Logger.SECURITY_SUCCESS, "test message error" );
-        testLogger.error(Logger.SECURITY_SUCCESS, "test message error", null );
-
-	    log4JLogger.error("test message error" );
-		log4JLogger.error("test message error", null );
-	}
-
-    /**
-	 * Test of warning method, of class org.owasp.esapi.Logger.
-	 */
-    public void testWarning() {
-        System.out.println("warning");
-        testLogger.warning(Logger.SECURITY_SUCCESS, "test message warning" );
-        testLogger.warning(Logger.SECURITY_SUCCESS, "test message warning", null );
-
-	    log4JLogger.warn("test message warning" );
-		log4JLogger.warn("test message warning", null );
-    }
-
-    /**
-	 * Test of fatal method, of class org.owasp.esapi.Logger.
-	 */
-    public void testFatal() {
-        System.out.println("fatal");
-        testLogger.fatal(Logger.SECURITY_SUCCESS, "test message fatal" );
-        testLogger.fatal(Logger.SECURITY_SUCCESS, "test message fatal", null );
-
-	    log4JLogger.fatal("test message fatal" );
-		log4JLogger.fatal("test message fatal", null );    
-	}
-    
-    /**
-     * Test of always method, of class org.owasp.esapi.Logger.
-     */
-    public void testAlways() {
-        System.out.println("always");
-        testLogger.always(Logger.SECURITY_SUCCESS, "test message always 1 (SECURITY_SUCCESS)" );
-        testLogger.always(Logger.SECURITY_AUDIT, "test message always 2 (SECURITY_AUDIT)", null );
-
-	    log4JLogger.always("test message always 3" );
-		log4JLogger.always("test message always 4", null );
-
-        try {
-        	throw new RuntimeException("What? You call that a 'throw'??? You couldn't hit the " +
-        							   "broad side of a barn (assuming that barns wore bras).");
-        } catch(RuntimeException rtex) {
-            testLogger.always(Logger.SECURITY_AUDIT, "test message always 5", rtex );
-            log4JLogger.always("test message always 6", rtex);
-        }
-	}
-
-}
Index: src/test/java/org/owasp/esapi/waf/WAFTestUtility.java
===================================================================
--- src/test/java/org/owasp/esapi/waf/WAFTestUtility.java	(revision 1961)
+++ src/test/java/org/owasp/esapi/waf/WAFTestUtility.java	(working copy)
@@ -39,7 +39,7 @@
     public static void setWAFPolicy( ESAPIWebApplicationFirewallFilter waf, String policyFile ) throws Exception {
         Map map = new HashMap();
     	map.put( "configuration", policyFile );
-    	map.put( "log_settings", "../log4j.xml");
+    	map.put( "log_settings", "../log4j2.xml");
     	FilterConfig mfc = new MockWafFilterConfig( map );
     	waf.init( mfc );
     }
Index: src/test/resources/esapi/ESAPI-CommaValidatorFileChecker.properties
===================================================================
--- src/test/resources/esapi/ESAPI-CommaValidatorFileChecker.properties	(revision 1961)
+++ src/test/resources/esapi/ESAPI-CommaValidatorFileChecker.properties	(working copy)
@@ -74,10 +74,7 @@
 ESAPI.Executor=org.owasp.esapi.reference.DefaultExecutor
 ESAPI.HTTPUtilities=org.owasp.esapi.reference.DefaultHTTPUtilities
 ESAPI.IntrusionDetector=org.owasp.esapi.reference.DefaultIntrusionDetector
-# Log4JFactory Requires log4j.xml or log4j.properties in classpath - http://www.laliluna.de/log4j-tutorial.html
-ESAPI.Logger=org.owasp.esapi.reference.Log4JLogFactory
-#ESAPI.Logger=org.owasp.esapi.reference.JavaLogFactory
-#ESAPI.Logger=org.owasp.esapi.reference.ExampleExtendedLog4JLogFactory
+ESAPI.Logger=org.slf4j.LoggerFactory
 ESAPI.Randomizer=org.owasp.esapi.reference.DefaultRandomizer
 ESAPI.Validator=org.owasp.esapi.reference.DefaultValidator
 
Index: src/test/resources/esapi/ESAPI-DualValidatorFileChecker.properties
===================================================================
--- src/test/resources/esapi/ESAPI-DualValidatorFileChecker.properties	(revision 1961)
+++ src/test/resources/esapi/ESAPI-DualValidatorFileChecker.properties	(working copy)
@@ -74,10 +74,7 @@
 ESAPI.Executor=org.owasp.esapi.reference.DefaultExecutor
 ESAPI.HTTPUtilities=org.owasp.esapi.reference.DefaultHTTPUtilities
 ESAPI.IntrusionDetector=org.owasp.esapi.reference.DefaultIntrusionDetector
-# Log4JFactory Requires log4j.xml or log4j.properties in classpath - http://www.laliluna.de/log4j-tutorial.html
-ESAPI.Logger=org.owasp.esapi.reference.Log4JLogFactory
-#ESAPI.Logger=org.owasp.esapi.reference.JavaLogFactory
-#ESAPI.Logger=org.owasp.esapi.reference.ExampleExtendedLog4JLogFactory
+ESAPI.Logger=org.slf4j.LoggerFactory
 ESAPI.Randomizer=org.owasp.esapi.reference.DefaultRandomizer
 ESAPI.Validator=org.owasp.esapi.reference.DefaultValidator
 
Index: src/test/resources/esapi/ESAPI-QuotedValidatorFileChecker.properties
===================================================================
--- src/test/resources/esapi/ESAPI-QuotedValidatorFileChecker.properties	(revision 1961)
+++ src/test/resources/esapi/ESAPI-QuotedValidatorFileChecker.properties	(working copy)
@@ -74,10 +74,7 @@
 ESAPI.Executor=org.owasp.esapi.reference.DefaultExecutor
 ESAPI.HTTPUtilities=org.owasp.esapi.reference.DefaultHTTPUtilities
 ESAPI.IntrusionDetector=org.owasp.esapi.reference.DefaultIntrusionDetector
-# Log4JFactory Requires log4j.xml or log4j.properties in classpath - http://www.laliluna.de/log4j-tutorial.html
-ESAPI.Logger=org.owasp.esapi.reference.Log4JLogFactory
-#ESAPI.Logger=org.owasp.esapi.reference.JavaLogFactory
-#ESAPI.Logger=org.owasp.esapi.reference.ExampleExtendedLog4JLogFactory
+ESAPI.Logger=org.slf4j.LoggerFactory
 ESAPI.Randomizer=org.owasp.esapi.reference.DefaultRandomizer
 ESAPI.Validator=org.owasp.esapi.reference.DefaultValidator
 
Index: src/test/resources/esapi/ESAPI-SingleValidatorFileChecker.properties
===================================================================
--- src/test/resources/esapi/ESAPI-SingleValidatorFileChecker.properties	(revision 1961)
+++ src/test/resources/esapi/ESAPI-SingleValidatorFileChecker.properties	(working copy)
@@ -74,10 +74,7 @@
 ESAPI.Executor=org.owasp.esapi.reference.DefaultExecutor
 ESAPI.HTTPUtilities=org.owasp.esapi.reference.DefaultHTTPUtilities
 ESAPI.IntrusionDetector=org.owasp.esapi.reference.DefaultIntrusionDetector
-# Log4JFactory Requires log4j.xml or log4j.properties in classpath - http://www.laliluna.de/log4j-tutorial.html
-ESAPI.Logger=org.owasp.esapi.reference.Log4JLogFactory
-#ESAPI.Logger=org.owasp.esapi.reference.JavaLogFactory
-#ESAPI.Logger=org.owasp.esapi.reference.ExampleExtendedLog4JLogFactory
+ESAPI.Logger=org.slf4j.LoggerFactory
 ESAPI.Randomizer=org.owasp.esapi.reference.DefaultRandomizer
 ESAPI.Validator=org.owasp.esapi.reference.DefaultValidator
 
Index: src/test/resources/esapi/ESAPI.properties
===================================================================
--- src/test/resources/esapi/ESAPI.properties	(revision 1961)
+++ src/test/resources/esapi/ESAPI.properties	(working copy)
@@ -74,10 +74,7 @@
 ESAPI.Executor=org.owasp.esapi.reference.DefaultExecutor
 ESAPI.HTTPUtilities=org.owasp.esapi.reference.DefaultHTTPUtilities
 ESAPI.IntrusionDetector=org.owasp.esapi.reference.DefaultIntrusionDetector
-# Log4JFactory Requires log4j.xml or log4j.properties in classpath - http://www.laliluna.de/log4j-tutorial.html
-ESAPI.Logger=org.owasp.esapi.reference.Log4JLogFactory
-#ESAPI.Logger=org.owasp.esapi.reference.JavaLogFactory
-#ESAPI.Logger=org.owasp.esapi.reference.ExampleExtendedLog4JLogFactory
+ESAPI.Logger=org.slf4j.LoggerFactory
 ESAPI.Randomizer=org.owasp.esapi.reference.DefaultRandomizer
 ESAPI.Validator=org.owasp.esapi.reference.DefaultValidator
 

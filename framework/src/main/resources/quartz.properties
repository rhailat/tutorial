# Default Properties file for use by StdSchedulerFactory to create a Quartz Scheduler Instance, if a different
# properties file is not explicitly specified.

org.quartz.scheduler.instanceName = DefaultQuartzScheduler
# org.quartz.scheduler.instanceId = [set for clustered instances]
org.quartz.scheduler.rmi.export = false
org.quartz.scheduler.rmi.proxy = false
org.quartz.scheduler.wrapJobExecutionInUserTransaction = false
org.quartz.scheduler.skipUpdateCheck = true

org.quartz.threadPool.class = org.quartz.simpl.SimpleThreadPool
org.quartz.threadPool.threadCount = 10
org.quartz.threadPool.threadPriority = 5
org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread = true

org.quartz.jobStore.misfireThreshold = 60000

# this is faster, but good only for single instance servers with no need for jobs to persist between restarts
org.quartz.jobStore.class = org.quartz.simpl.RAMJobStore

# EntityJobStore should be safe, but not completely tested; note that this is less consistent than the RAMJobStore
#     and certain data validation tests will fail because of data in a different order
# org.quartz.jobStore.class = org.moqui.impl.service.EntityJobStore

# Configure the Job Initialization Plugin
# see http://quartz-scheduler.org/documentation/quartz-2.2.x/cookbook/JobInitPlugin
org.quartz.plugin.jobInitializer.class = org.quartz.plugins.xml.XMLSchedulingDataProcessorPlugin
# these comma-separated fileNames can be actual file paths or classpath resource paths
#     (see XMLSchedulingDataProcessorPlugin.JobFile.initialize())
org.quartz.plugin.jobInitializer.fileNames = quartz_data.xml
org.quartz.plugin.jobInitializer.failOnFileNotFound = true
org.quartz.plugin.jobInitializer.scanInterval = 0
org.quartz.plugin.jobInitializer.wrapInUserTransaction = false
